<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MultipleLogFilesTitle" xml:space="preserve">
    <value>Azure SQL Managed Instance does not support multiple log files.</value>
  </data>
  <data name="MultipleLogFilesIssueCategory" xml:space="preserve">
    <value>Issue</value>
  </data>
  <data name="MultipleLogFilesDescription" xml:space="preserve">
    <value>SQL Server allows a database to log to multiple files. This database has multiple log files which is not supported in Azure SQL Managed Instance. This database can’t be migrated as the backup can’t be restored on Azure SQL Managed Instance.</value>
  </data>
  <data name="MultipleLogFilesRecommendation" xml:space="preserve">
    <value>Azure SQL Managed Instance supports only a single log per database. You need to delete all but one of the log files before migrating this database to Azure: ALTER DATABASE [database_name] REMOVE FILE [log_file_name];</value>
  </data>
  <data name="MultipleLogFilesMoreInformation" xml:space="preserve">
    <value>Unsupported database options in Azure SQL Managed Instance</value>
  </data>
  <data name="MultipleLogFilesMoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/transact-sql-tsql-differences-sql-server#database-options</value>
  </data>
  <data name="MIDatabaseSizeTitle" xml:space="preserve">
    <value>Azure SQL Managed Instance does not support database size greater than 16 TB.</value>
  </data>
  <data name="MIDatabaseSizeIssueCategory" xml:space="preserve">
    <value>Issue</value>
  </data>
  <data name="MIDatabaseSizeDescription" xml:space="preserve">
    <value>The size of the database is greater than maximum instance reserved storage. This database can’t be selected for migration as the size exceeded the allowed limit.</value>
  </data>
  <data name="MIDatabaseSizeRecommendation" xml:space="preserve">
    <value>Evaluate if the data can be archived compressed or sharded into multiple databases. Alternatively, migrate to SQL Server on Azure Virtual Machine.</value>
  </data>
  <data name="MIDatabaseSizeMoreInformation" xml:space="preserve">
    <value>Hardware generation characteristics of Azure SQL Managed Instance</value>
  </data>
  <data name="MIDatabaseSizeMoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/resource-limits#hardware-generation-characteristics</value>
  </data>
  <data name="FileStreamTitle" xml:space="preserve">
    <value>Filestream and Filetable are not supported in Azure SQL Managed Instance.</value>
  </data>
  <data name="FileStreamIssueCategory" xml:space="preserve">
    <value>Issue</value>
  </data>
  <data name="FileStreamDescription" xml:space="preserve">
    <value>The Filestream feature, which allows you to store unstructured data such as text documents, images, and videos in NTFS file system, is not supported in Azure SQL Managed Instance. This database can’t be migrated as the backup containing Filestream filegroups can’t be restored on Azure SQL Managed Instance.</value>
  </data>
  <data name="FileStreamRecommendation" xml:space="preserve">
    <value>Upload the unstructured files to Azure Blob storage and store metadata related to these files (name, type, URL location, storage key etc.) in Azure SQL Managed Instance. You may have to re-engineer your application to enable streaming blobs to and from Azure SQL Managed Instance. Alternatively, migrate to SQL Server on Azure Virtual Machine.</value>
  </data>
  <data name="FileStreamMoreInformation" xml:space="preserve">
    <value>Streaming Blobs To and From SQL Azure</value>
  </data>
  <data name="FileStreamMoreInformationlink" xml:space="preserve">
    <value>https://azure.microsoft.com/en-in/blog/streaming-blobs-to-and-from-sql-azure/</value>
  </data>
  <data name="XpCmdshellTitle" xml:space="preserve">
    <value>xp_cmdshell is not supported in Azure SQL Managed Instance.</value>
  </data>
  <data name="XpCmdshellIssueCategory" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="XpCmdshellDescription" xml:space="preserve">
    <value>Xp_cmdshell which spawns a Windows command shell and passes in a string for execution is not supported in Azure SQL Managed Instance.</value>
  </data>
  <data name="XpCmdshellRecommendation" xml:space="preserve">
    <value>Review impacted objects section to see all objects using xp_cmdshell and evaluate if the reference to xp_cmdshell or the impacted object can be removed. Consider exploring Azure Automation that delivers cloud-based automation and configuration service. Alternatively, migrate to SQL Server on Azure Virtual Machine.</value>
  </data>
  <data name="XpCmdshellMoreInformation" xml:space="preserve">
    <value>Stored Procedure differences in Azure SQL Managed Instance</value>
  </data>
  <data name="XpCmdshellMoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/transact-sql-tsql-differences-sql-server#stored-procedures-functions-and-triggers</value>
  </data>
  <data name="LinkedServerWithNonSQLProviderTitle" xml:space="preserve">
    <value>Linked server with non-SQL Server Provider is not supported in Azure SQL Managed Instance.</value>
  </data>
  <data name="LinkedServerWithNonSQLProviderIssueCategory" xml:space="preserve">
    <value>Issue</value>
  </data>
  <data name="LinkedServerWithNonSQLProviderDescription" xml:space="preserve">
    <value>Linked servers enable the SQL Server Database Engine to execute commands against OLE DB data sources outside of the instance of SQL Server. Linked server with non-SQL Server Provider is not supported in Azure SQL Managed Instance.</value>
  </data>
  <data name="LinkedServerWithNonSQLProviderRecommendation" xml:space="preserve">
    <value>Azure SQL Managed Instance does not support linked server functionality if the remote server provider is non-SQL Server like Oracle, Sybase etc. The following actions are recommended to eliminate the need for linked servers: 1. Identify the dependent database(s) from remote non-SQL servers and consider moving these into the database being migrated. 2. Migrate the dependent database(s) to supported targets like Azure SQL Managed Instance, Azure SQL Database, Azure Synapse SQL, and SQL Server on Azure Virtual Machine. 3. Consider creating linked server between Azure SQL Managed Instance and SQL Server on Azure Virtual Machine (SQL VM). Then from SQL VM create linked server to Oracle, Sybase etc. This approach does involve two hops but can be used as temporary workaround. Alternatively, migrate to SQL Server on Azure Virtual Machine.</value>
  </data>
  <data name="LinkedServerWithNonSQLProviderMoreInformation" xml:space="preserve">
    <value>Linked Server differences in Azure SQL Managed Instance</value>
  </data>
  <data name="LinkedServerWithNonSQLProviderMoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/transact-sql-tsql-differences-sql-server#linked-servers</value>
  </data>
  <data name="OpenRowsetWithNonBlobDataSourceBulkTitle" xml:space="preserve">
    <value>OpenRowSet used in bulk operation with non-Azure blob storage data source is not supported in Azure SQL Managed Instance.</value>
  </data>
  <data name="OpenRowsetWithNonBlobDataSourceBulkIssueCategory" xml:space="preserve">
    <value>Issue</value>
  </data>
  <data name="OpenRowsetWithNonBlobDataSourceBulkDescription" xml:space="preserve">
    <value>OPENROWSET supports bulk operations through a built-in BULK provider that enables data from a file to be read and returned as a rowset. OPENROWSET with non-Azure blob storage data source is not supported in Azure SQL Managed Instance.</value>
  </data>
  <data name="OpenRowsetWithNonBlobDataSourceBulkRecommendation" xml:space="preserve">
    <value>Azure SQL Managed Instance cannot access file shares and Windows folders, so the files must be imported from Azure blob storage. Therefore, only blob type DATASOURCE is supported in OPENROWSET function. Alternatively, migrate to SQL Server on Azure Virtual Machine.</value>
  </data>
  <data name="OpenRowsetWithNonBlobDataSourceBulkMoreInformation" xml:space="preserve">
    <value>Bulk Insert and OPENROWSET differences in Azure SQL Managed Instance</value>
  </data>
  <data name="OpenRowsetWithNonBlobDataSourceBulkMoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/transact-sql-tsql-differences-sql-server#bulk-insert--openrowset</value>
  </data>
  <data name="OpenRowsetWithNonSQLProviderTitle" xml:space="preserve">
    <value>OpenRowSet with non-SQL provider is not supported in Azure SQL Managed Instance.</value>
  </data>
  <data name="OpenRowsetWithNonSQLProviderIssueCategory" xml:space="preserve">
    <value>Issue</value>
  </data>
  <data name="OpenRowsetWithNonSQLProviderDescription" xml:space="preserve">
    <value>This method is an alternative to accessing tables in a linked server and is a one-time, ad hoc method of connecting and accessing remote data by using OLE DB. OpenRowSet with non-SQL provider is not supported in Azure SQL Managed Instance.</value>
  </data>
  <data name="OpenRowsetWithNonSQLProviderRecommendation" xml:space="preserve">
    <value>OPENROWSET function can be used to execute queries only on SQL Server instances (either managed, on-premises, or in Virtual Machines). Only SQLNCLI, SQLNCLI11, and SQLOLEDB values are supported as provider. Therefore, the recommendation action is that identify the dependent database(s) from remote non-SQL Servers and consider moving these into the database being migrated. Alternatively, migrate to SQL Server on Azure Virtual Machine.</value>
  </data>
  <data name="OpenRowsetWithNonSQLProviderMoreInformation" xml:space="preserve">
    <value>Bulk Insert and OPENROWSET differences in Azure SQL Managed Instance</value>
  </data>
  <data name="OpenRowsetWithNonSQLProviderMoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/transact-sql-tsql-differences-sql-server#bulk-insert--openrowset</value>
  </data>
  <data name="AssemblyFromFileTitle" xml:space="preserve">
    <value>'CREATE ASSEMBLY' and 'ALTER ASSEMBLY' with a file parameter are unsupported in Azure SQL Managed Instance.</value>
  </data>
  <data name="AssemblyFromFileIssueCategory" xml:space="preserve">
    <value>Issue</value>
  </data>
  <data name="AssemblyFromFileDescription" xml:space="preserve">
    <value>Azure SQL Managed Instance does not support 'CREATE ASSEMBLY' or 'ALTER ASSEMBLY' with a file parameter. A binary parameter is supported. See the Impacted Objects section for the specific object where the file parameter is used.</value>
  </data>
  <data name="AssemblyFromFileRecommendation" xml:space="preserve">
    <value>Review objects using 'CREATE ASSEMBLY' or 'ALTER ASSEMBLY with a file parameter. If any such objects that are required, convert the file parameter to a binary parameter. Alternatively, migrate to SQL Server on Azure Virtual Machine.</value>
  </data>
  <data name="AssemblyFromFileMoreInformation" xml:space="preserve">
    <value>CLR differences in Azure SQL Managed Instance</value>
  </data>
  <data name="AssemblyFromFileMoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/transact-sql-tsql-differences-sql-server#clr</value>
  </data>
  <data name="BulkInsertTitle" xml:space="preserve">
    <value>BULK INSERT with non-Azure blob data source is not supported in Azure SQL Managed Instance.</value>
  </data>
  <data name="BulkInsertIssueCategory" xml:space="preserve">
    <value>Issue</value>
  </data>
  <data name="BulkInsertDescription" xml:space="preserve">
    <value>Azure SQL Managed Instance cannot access file shares or Windows folders. See the "Impacted Objects" section for the specific uses of BULK INSERT statements that do not reference an Azure blob. Objects with 'BULK INSERT' where the source is not Azure blob storage will not work after migrating to Azure SQL Managed Instance.</value>
  </data>
  <data name="BulkInsertRecommendation" xml:space="preserve">
    <value>You will need to convert BULK INSERT statements that use local files or file shares to use files from Azure blob storage instead, when migrating to Azure SQL Managed Instance. Alternatively, migrate to SQL Server on Azure Virtual Machine.</value>
  </data>
  <data name="BulkInsertMoreInformation" xml:space="preserve">
    <value>Bulk Insert and OPENROWSET differences in Azure SQL Managed Instance</value>
  </data>
  <data name="BulkInsertMoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/transact-sql-tsql-differences-sql-server#bulk-insert--openrowset</value>
  </data>
  <data name="CryptographicProviderTitle" xml:space="preserve">
    <value>A use of CREATE CRYPTOGRAPHIC PROVIDER or ALTER CRYPTOGRAPHIC PROVIDER was found, which is not supported in Azure SQL Managed Instance.</value>
  </data>
  <data name="CryptographicProviderIssueCategory" xml:space="preserve">
    <value>Issue</value>
  </data>
  <data name="CryptographicProviderDescription" xml:space="preserve">
    <value>Azure SQL Managed Instance does not support CRYPTOGRAPHIC PROVIDER statements because it cannot access files. See the Impacted Objects section for the specific uses of CRYPTOGRAPHIC PROVIDER statements. Objects with 'CREATE CRYPTOGRAPHIC PROVIDER' or 'ALTER CRYPTOGRAPHIC PROVIDER' will not work correctly after migrating to Azure SQL Managed Instance.</value>
  </data>
  <data name="CryptographicProviderRecommendation" xml:space="preserve">
    <value>Review objects with 'CREATE CRYPTOGRAPHIC PROVIDER' or 'ALTER CRYPTOGRAPHIC PROVIDER'. In any such objects that are required, remove the uses of these features. Alternatively, migrate to SQL Server on Azure Virtual Machine.</value>
  </data>
  <data name="CryptographicProviderMoreInformation" xml:space="preserve">
    <value>Cryptographic provider differences in Azure SQL Managed Instance</value>
  </data>
  <data name="CryptographicProviderMoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/transact-sql-tsql-differences-sql-server#cryptographic-providers</value>
  </data>
  <data name="MIHomogeneousMSDTCTransactSQLTitle" xml:space="preserve">
    <value>BEGIN DISTRIBUTED TRANSACTION is supported across multiple servers for Azure SQL Managed Instance.</value>
  </data>
  <data name="MIHomogeneousMSDTCTransactSQLIssueCategory" xml:space="preserve">
    <value>Issue</value>
  </data>
  <data name="MIHomogeneousMSDTCTransactSQLDescription" xml:space="preserve">
    <value>Distributed transaction started by Transact SQL BEGIN DISTRIBUTED TRANSACTION and managed by Microsoft Distributed Transaction Coordinator (MS DTC) is supported across multiple servers for Azure SQL Managed Instance.</value>
  </data>
  <data name="MIHomogeneousMSDTCTransactSQLRecommendation" xml:space="preserve">
    <value>Review impacted objects section to see all objects using BEGIN DISTRUBUTED TRANSACTION. Consider migrating the participant databases to Azure SQL Managed Instance where distributed transactions across multiple instances are supported (Currently in preview). Alternatively, migrate to SQL Server on Azure Virtual Machine.</value>
  </data>
  <data name="MIHomogeneousMSDTCTransactSQLMoreInformation" xml:space="preserve">
    <value>Transactions across multiple servers for Azure SQL Managed Instance</value>
  </data>
  <data name="MIHomogeneousMSDTCTransactSQLMoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/azure/azure-sql/database/elastic-transactions-overview#transactions-across-multiple-servers-for-azure-sql-managed-instance</value>
  </data>
  <data name="MIHeterogeneousMSDTCTransactSQLTitle" xml:space="preserve">
    <value>BEGIN DISTRIBUTED TRANSACTION with non-SQL Server remote server is not supported in Azure SQL Managed Instance.</value>
  </data>
  <data name="MIHeterogeneousMSDTCTransactSQLIssueCategory" xml:space="preserve">
    <value>Issue</value>
  </data>
  <data name="MIHeterogeneousMSDTCTransactSQLDescription" xml:space="preserve">
    <value>Distributed transaction started by Transact SQL BEGIN DISTRIBUTED TRANSACTION and managed by Microsoft Distributed Transaction Coordinator (MS DTC) is not supported in Azure SQL Managed Instance if the remote server is not SQL Server.</value>
  </data>
  <data name="MIHeterogeneousMSDTCTransactSQLRecommendation" xml:space="preserve">
    <value>Review impacted objects section to see all objects using BEGIN DISTRUBUTED TRANSACTION. Consider migrating the participant databases to Azure SQL Managed Instance where distributed transactions across multiple instances are supported (Currently in preview). Alternatively, migrate to SQL Server on Azure Virtual Machine.</value>
  </data>
  <data name="MIHeterogeneousMSDTCTransactSQLMoreInformation" xml:space="preserve">
    <value>Transactions across multiple servers for Azure SQL Managed Instance</value>
  </data>
  <data name="MIHeterogeneousMSDTCTransactSQLMoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/azure/azure-sql/database/elastic-transactions-overview#transactions-across-multiple-servers-for-azure-sql-managed-instance</value>
  </data>
  <data name="ComputeClauseTitle" xml:space="preserve">
    <value>COMPUTE clause is discontinued and has been removed.</value>
  </data>
  <data name="ComputeClauseIssueCategory" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="ComputeClauseDescription" xml:space="preserve">
    <value>The COMPUTE clause generates totals that appear as additional summary columns at the end of the result set. However, this clause is no longer supported in Azure SQL Managed Instance.</value>
  </data>
  <data name="ComputeClauseRecommendation" xml:space="preserve">
    <value>The T-SQL module needs to be rewritten using the ROLLUP operator instead. The code below demonstrates how COMPUTE can be replaced with ROLLUP: USE AdventureWorks GO;  SELECT SalesOrderID, UnitPrice, UnitPriceDiscount FROM Sales.SalesOrderDetail ORDER BY SalesOrderID COMPUTE SUM(UnitPrice), SUM(UnitPriceDiscount) BY SalesOrderID GO; SELECT SalesOrderID, UnitPrice, UnitPriceDiscount,SUM(UnitPrice) as UnitPrice , SUM(UnitPriceDiscount) as UnitPriceDiscount FROM Sales.SalesOrderDetail GROUP BY SalesOrderID, UnitPrice, UnitPriceDiscount WITH ROLLUP;</value>
  </data>
  <data name="ComputeClauseMoreInformation" xml:space="preserve">
    <value>Discontinued Database Engine Functionality in SQL Server</value>
  </data>
  <data name="ComputeClauseMoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/previous-versions/sql/2014/database-engine/discontinued-database-engine-functionality-in-sql-server-2016?view=sql-server-2014#Denali</value>
  </data>
  <data name="DatabasePrincipalAliasTitle" xml:space="preserve">
    <value>SYS.DATABASE_PRINCIPAL_ALIASES is discontinued and has been removed.</value>
  </data>
  <data name="DatabasePrincipalAliasIssueCategory" xml:space="preserve">
    <value>Issue</value>
  </data>
  <data name="DatabasePrincipalAliasDescription" xml:space="preserve">
    <value>SYS.DATABASE_PRINCIPAL_ALIASES is discontinued and has been removed in Azure SQL Managed Instance.</value>
  </data>
  <data name="DatabasePrincipalAliasRecommendation" xml:space="preserve">
    <value>Use roles instead of aliases.</value>
  </data>
  <data name="DatabasePrincipalAliasMoreInformation" xml:space="preserve">
    <value>Discontinued Database Engine Functionality in SQL Server</value>
  </data>
  <data name="DatabasePrincipalAliasMoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/previous-versions/sql/2014/database-engine/discontinued-database-engine-functionality-in-sql-server-2016?view=sql-server-2014#Denali</value>
  </data>
  <data name="DisableDefCNSTCHKTitle" xml:space="preserve">
    <value>SET option DISABLE_DEF_CNST_CHK is discontinued and has been removed.</value>
  </data>
  <data name="DisableDefCNSTCHKIssueCategory" xml:space="preserve">
    <value>Issue</value>
  </data>
  <data name="DisableDefCNSTCHKDescription" xml:space="preserve">
    <value>SET option DISABLE_DEF_CNST_CHK is discontinued and has been removed in Azure SQL Managed Instance.</value>
  </data>
  <data name="DisableDefCNSTCHKRecommendation" xml:space="preserve">
    <value />
  </data>
  <data name="DisableDefCNSTCHKMoreInformation" xml:space="preserve">
    <value>Discontinued Database Engine Functionality in SQL Server</value>
  </data>
  <data name="DisableDefCNSTCHKMoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/previous-versions/sql/2014/database-engine/discontinued-database-engine-functionality-in-sql-server-2016?view=sql-server-2014#Denali</value>
  </data>
  <data name="FastFirstRowHintTitle" xml:space="preserve">
    <value>FASTFIRSTROW query hint is discontinued and has been removed.</value>
  </data>
  <data name="FastFirstRowHintIssueCategory" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="FastFirstRowHintDescription" xml:space="preserve">
    <value>FASTFIRSTROW query hint is discontinued and has been removed in Azure SQL Managed Instance.</value>
  </data>
  <data name="FastFirstRowHintRecommendation" xml:space="preserve">
    <value>Instead of FASTFIRSTROW query hint use OPTION (FAST n).</value>
  </data>
  <data name="FastFirstRowHintMoreInformation" xml:space="preserve">
    <value>Discontinued Database Engine Functionality in SQL Server</value>
  </data>
  <data name="FastFirstRowHintMoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/previous-versions/sql/2014/database-engine/discontinued-database-engine-functionality-in-sql-server-2016?view=sql-server-2014#Denali</value>
  </data>
  <data name="NextColumnTitle" xml:space="preserve">
    <value>Tables and Columns named NEXT will lead to an error In Azure SQL Managed Instance.</value>
  </data>
  <data name="NextColumnIssueCategory" xml:space="preserve">
    <value>Issue</value>
  </data>
  <data name="NextColumnDescription" xml:space="preserve">
    <value>Tables or columns named NEXT were detected. Sequences, introduced in Microsoft SQL Server, use the ANSI standard NEXT VALUE FOR function. If a table or a column is named NEXT and the column is aliased as VALUE, and if the ANSI standard AS is omitted, the resulting statement can cause an error.</value>
  </data>
  <data name="NextColumnRecommendation" xml:space="preserve">
    <value>Rewrite statements to include the ANSI standard AS keyword when aliasing a table or column. For example, when a column is named NEXT and that column is aliased as VALUE, the query SELECT NEXT VALUE FROM TABLE will cause an error and should be rewritten as SELECT NEXT AS VALUE FROM TABLE. Similarly, when a table is named NEXT and that table is aliased as VALUE, the query SELECT Col1 FROM NEXT VALUE will cause an error and should be rewritten as SELECT Col1 FROM NEXT AS VALUE.</value>
  </data>
  <data name="NextColumnMoreInformation" xml:space="preserve">
    <value />
  </data>
  <data name="NextColumnMoreInformationlink" xml:space="preserve">
    <value />
  </data>
  <data name="NonANSILeftOuterJoinSyntaxTitle" xml:space="preserve">
    <value>Non-ANSI style left outer join is discontinued and has been removed.</value>
  </data>
  <data name="NonANSILeftOuterJoinSyntaxIssueCategory" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="NonANSILeftOuterJoinSyntaxDescription" xml:space="preserve">
    <value>Non-ANSI style left outer join is discontinued and has been removed in Azure SQL Managed Instance.</value>
  </data>
  <data name="NonANSILeftOuterJoinSyntaxRecommendation" xml:space="preserve">
    <value>Use ANSI join syntax.</value>
  </data>
  <data name="NonANSILeftOuterJoinSyntaxMoreInformation" xml:space="preserve">
    <value>Discontinued Database Engine Functionality in SQL Server</value>
  </data>
  <data name="NonANSILeftOuterJoinSyntaxMoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/previous-versions/sql/2014/database-engine/discontinued-database-engine-functionality-in-sql-server-2016?view=sql-server-2014#Denali</value>
  </data>
  <data name="NonANSIRightOuterJoinSyntaxTitle" xml:space="preserve">
    <value>Non-ANSI style right outer join is discontinued and has been removed.</value>
  </data>
  <data name="NonANSIRightOuterJoinSyntaxIssueCategory" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="NonANSIRightOuterJoinSyntaxDescription" xml:space="preserve">
    <value>Non-ANSI style right outer join is discontinued and has been removed in Azure SQL Managed Instance.</value>
  </data>
  <data name="NonANSIRightOuterJoinSyntaxRecommendation" xml:space="preserve">
    <value>Use ANSI join syntax.</value>
  </data>
  <data name="NonANSIRightOuterJoinSyntaxMoreInformation" xml:space="preserve">
    <value>Discontinued Database Engine Functionality in SQL Server</value>
  </data>
  <data name="NonANSIRightOuterJoinSyntaxMoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/previous-versions/sql/2014/database-engine/discontinued-database-engine-functionality-in-sql-server-2016?view=sql-server-2014#Denali</value>
  </data>
  <data name="RAISERRORTitle" xml:space="preserve">
    <value>Legacy style RAISERROR calls should be replaced with modern equivalents.</value>
  </data>
  <data name="RAISERRORIssueCategory" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="RAISERRORDescription" xml:space="preserve">
    <value>RAISERROR calls like the below example are termed as legacy-style because they do not include the commas and the parenthesis. RAISERROR 50001 'this is a test'. This method of calling RAISERROR is discontinued and removed in Azure SQL Managed Instance.</value>
  </data>
  <data name="RAISERRORRecommendation" xml:space="preserve">
    <value>Rewrite the statement using the current RAISERROR syntax, or evaluate if the modern approach of BEGIN TRY { }  END TRY BEGIN CATCH {  THROW; } END CATCH is feasible.</value>
  </data>
  <data name="RAISERRORMoreInformation" xml:space="preserve">
    <value>Discontinued Database Engine Functionality in SQL Server</value>
  </data>
  <data name="RAISERRORMoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/previous-versions/sql/2014/database-engine/discontinued-database-engine-functionality-in-sql-server-2016?view=sql-server-2014#Denali</value>
  </data>
  <data name="DbCompatLevelLowerThan100Title" xml:space="preserve">
    <value>Database compatibility level below 100 is not supported</value>
  </data>
  <data name="DbCompatLevelLowerThan100IssueCategory" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="DbCompatLevelLowerThan100Description" xml:space="preserve">
    <value>Database Compatibility Level is a valuable tool to assist in database modernization, by allowing the SQL Server Database Engine to be upgraded, while keeping connecting applications functional status by maintaining the same pre-upgrade Database Compatibility Level. Azure SQL Managed Instance doesn’t support compatibility levels below 100. When the database with compatibility level below 100 is restored on Azure SQL Managed Instance, the compatibility level is upgraded to 100.</value>
  </data>
  <data name="DbCompatLevelLowerThan100Recommendation" xml:space="preserve">
    <value>Evaluate if the application functionality is intact when the database compatibility level is upgraded to 100 on Azure SQL Managed Instance. Alternatively, migrate to SQL Server on Azure Virtual Machine.</value>
  </data>
  <data name="DbCompatLevelLowerThan100MoreInformation" xml:space="preserve">
    <value>Supported compatibility levels in Azure SQL Managed Instance</value>
  </data>
  <data name="DbCompatLevelLowerThan100MoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/transact-sql-tsql-differences-sql-server#compatibility-levels</value>
  </data>
  <data name="MIInstanceSizeTitle" xml:space="preserve">
    <value>Maximum instance storage size in Azure SQL Managed Instance cannot be greater than 8 TB.</value>
  </data>
  <data name="MIInstanceSizeIssueCategory" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="MIInstanceSizeDescription" xml:space="preserve">
    <value>The size of all databases is greater than maximum instance reserved storage.</value>
  </data>
  <data name="MIInstanceSizeRecommendation" xml:space="preserve">
    <value>Consider migrating the databases to different Azure SQL Managed Instances or to SQL Server on Azure Virtual Machine if all the databases must exist on the same instance.</value>
  </data>
  <data name="MIInstanceSizeMoreInformation" xml:space="preserve">
    <value>Hardware generation characteristics of Azure SQL Managed Instance</value>
  </data>
  <data name="MIInstanceSizeMoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/resource-limits#hardware-generation-characteristics</value>
  </data>
  <data name="NumDbExceeds100Title" xml:space="preserve">
    <value>Azure SQL Managed Instance supports a maximum of 100 databases per instance.</value>
  </data>
  <data name="NumDbExceeds100IssueCategory" xml:space="preserve">
    <value>Issue</value>
  </data>
  <data name="NumDbExceeds100Description" xml:space="preserve">
    <value>Maximum number of databases supported in Azure SQL Managed Instance is 100, unless the instance storage size limit has been reached.</value>
  </data>
  <data name="NumDbExceeds100Recommendation" xml:space="preserve">
    <value>Consider migrating the databases to different Azure SQL Managed Instances or to SQL Server on Azure Virtual Machine if all the databases must exist on the same instance.</value>
  </data>
  <data name="NumDbExceeds100MoreInformation" xml:space="preserve">
    <value>Azure SQL Managed Instance Resource Limits</value>
  </data>
  <data name="NumDbExceeds100MoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/resource-limits#service-tier-characteristics</value>
  </data>
  <data name="SqlMailTitle" xml:space="preserve">
    <value>SQL Mail has been discontinued.</value>
  </data>
  <data name="SqlMailIssueCategory" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="SqlMailDescription" xml:space="preserve">
    <value>SQL Mail has been discontinued and removed in Azure SQL Managed Instance.</value>
  </data>
  <data name="SqlMailRecommendation" xml:space="preserve">
    <value>Use Database Mail</value>
  </data>
  <data name="SqlMailMoreInformation" xml:space="preserve">
    <value>Discontinued Database Engine Functionality in SQL Server</value>
  </data>
  <data name="SqlMailMoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/previous-versions/sql/2014/database-engine/discontinued-database-engine-functionality-in-sql-server-2016?view=sql-server-2014#Denali</value>
  </data>
  <data name="SystemProcedures110Title" xml:space="preserve">
    <value>Detected statements that reference removed system stored procedures that are not available in Azure SQL Managed Instance.</value>
  </data>
  <data name="SystemProcedures110IssueCategory" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="SystemProcedures110Description" xml:space="preserve">
    <value>Following unsupported system and extended stored procedures cannot be used in Azure SQL Managed Instance - sp_dboption,sp_addserver,sp_dropalias,sp_activedirectory_obj,sp_activedirectory_scp,sp_activedirectory_start</value>
  </data>
  <data name="SystemProcedures110Recommendation" xml:space="preserve">
    <value>Remove references to unsupported system procedures that have been removed in Azure SQL Managed Instance.</value>
  </data>
  <data name="SystemProcedures110MoreInformation" xml:space="preserve">
    <value>Discontinued Database Engine Functionality in SQL Server</value>
  </data>
  <data name="SystemProcedures110MoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/previous-versions/sql/2014/database-engine/discontinued-database-engine-functionality-in-sql-server-2016?view=sql-server-2014#Denali</value>
  </data>
  <data name="AnalysisCommandJobTitle" xml:space="preserve">
    <value>AnalysisCommand job step is not supported in Azure SQL Managed Instance.</value>
  </data>
  <data name="AnalysisCommandJobIssueCategory" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="AnalysisCommandJobDescription" xml:space="preserve">
    <value>It is a job step that runs an Analysis Services command. AnalysisCommand job step is not supported in Azure SQL Managed Instance.</value>
  </data>
  <data name="AnalysisCommandJobRecommendation" xml:space="preserve">
    <value>Review impacted objects section to see all jobs using Analysis Service Command job step and evaluate if the job step or the impacted object can be removed. Alternatively, migrate to SQL Server on Azure Virtual Machine.</value>
  </data>
  <data name="AnalysisCommandJobMoreInformation" xml:space="preserve">
    <value>SQL Server Agent differences in Azure SQL Managed Instance</value>
  </data>
  <data name="AnalysisCommandJobMoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/transact-sql-tsql-differences-sql-server#sql-server-agent</value>
  </data>
  <data name="AnalysisQueryJobTitle" xml:space="preserve">
    <value>AnalysisQuery job step is not supported in Azure SQL Managed Instance.</value>
  </data>
  <data name="AnalysisQueryJobIssueCategory" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="AnalysisQueryJobDescription" xml:space="preserve">
    <value>It is a job step that runs an Analysis Services query. AnalysisQuery job step is not supported in Azure SQL Managed Instance.</value>
  </data>
  <data name="AnalysisQueryJobRecommendation" xml:space="preserve">
    <value>Review impacted objects section to see all jobs using Analysis Service Query job step and evaluate if the job step or the impacted object can be removed. Alternatively, migrate to SQL Server on Azure Virtual Machine.</value>
  </data>
  <data name="AnalysisQueryJobMoreInformation" xml:space="preserve">
    <value>SQL Server Agent differences in Azure SQL Managed Instance</value>
  </data>
  <data name="AnalysisQueryJobMoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/transact-sql-tsql-differences-sql-server#sql-server-agent</value>
  </data>
  <data name="MergeJobTitle" xml:space="preserve">
    <value>Merge job step is not supported in Azure SQL Managed Instance.</value>
  </data>
  <data name="MergeJobIssueCategory" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="MergeJobDescription" xml:space="preserve">
    <value>It is a job step that activates the replication Merge Agent. The Replication Merge Agent is a utility executable that applies the initial snapshot held in the database tables to the Subscribers. It also merges incremental data changes that occurred at the Publisher after the initial snapshot was created and reconciles conflicts either according to the rules you configure or using a custom resolver you create. Merge job step is not supported in Azure SQL Managed Instance.</value>
  </data>
  <data name="MergeJobRecommendation" xml:space="preserve">
    <value>Review impacted objects section to see all jobs using Merge job step and evaluate if the job step or the impacted object can be removed. Alternatively, migrate to SQL Server on Azure Virtual Machine.</value>
  </data>
  <data name="MergeJobMoreInformation" xml:space="preserve">
    <value>SQL Server Agent differences in Azure SQL Managed Instance</value>
  </data>
  <data name="MergeJobMoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/transact-sql-tsql-differences-sql-server#sql-server-agent</value>
  </data>
  <data name="PowerShellJobTitle" xml:space="preserve">
    <value>PowerShell job step is not supported in Azure SQL Managed Instance.</value>
  </data>
  <data name="PowerShellJobIssueCategory" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="PowerShellJobDescription" xml:space="preserve">
    <value>It is a job step that runs a PowerShell script. PowerShell job step is not supported in Azure SQL Managed Instance.</value>
  </data>
  <data name="PowerShellJobRecommendation" xml:space="preserve">
    <value>Review impacted objects section to see all jobs using PowerShell job step and evaluate if the job step or the impacted object can be removed. Evaluate if Azure Automation can be used. Alternatively, migrate to SQL Server on Azure Virtual Machine.</value>
  </data>
  <data name="PowerShellJobMoreInformation" xml:space="preserve">
    <value>SQL Server Agent differences in Azure SQL Managed Instance</value>
  </data>
  <data name="PowerShellJobMoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/transact-sql-tsql-differences-sql-server#sql-server-agent</value>
  </data>
  <data name="QueueReaderJobTitle" xml:space="preserve">
    <value>Queue Reader job step is not supported in Azure SQL Managed Instance.</value>
  </data>
  <data name="QueueReaderJobIssueCategory" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="QueueReaderJobDescription" xml:space="preserve">
    <value>It is a job step that activates the replication Queue Reader Agent. The Replication Queue Reader Agent is an executable that reads messages stored in a Microsoft SQL Server queue or a Microsoft Message Queue and then applies those messages to the Publisher. Queue Reader Agent is used with snapshot and transactional publications that allow queued updating. Queue Reader job step is not supported in Azure SQL Managed Instance.</value>
  </data>
  <data name="QueueReaderJobRecommendation" xml:space="preserve">
    <value>Review impacted objects section to see all jobs using Queue Reader job step and evaluate if the job step or the impacted object can be removed. Alternatively, migrate to SQL Server on Azure Virtual Machine.</value>
  </data>
  <data name="QueueReaderJobMoreInformation" xml:space="preserve">
    <value>SQL Server Agent differences in Azure SQL Managed Instance</value>
  </data>
  <data name="QueueReaderJobMoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/transact-sql-tsql-differences-sql-server#sql-server-agent</value>
  </data>
  <data name="TransactSqlJobTitle" xml:space="preserve">
    <value>TSQL job step includes unsupported commands in Azure SQL Managed Instance</value>
  </data>
  <data name="TransactSqlJobIssueCategory" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="TransactSqlJobDescription" xml:space="preserve">
    <value>It is a job step that runs TSQL scripts at scheduled time. TSQL job step includes unsupported commands which are not supported in Azure SQL Managed Instance.</value>
  </data>
  <data name="TransactSqlJobRecommendation" xml:space="preserve">
    <value>Review impacted objects section to see all jobs that include unsupported commands in Azure SQL Managed Instance and evaluate if the job step or the impacted object can be removed. Alternatively, migrate to SQL Server on Azure Virtual Machine.</value>
  </data>
  <data name="TransactSqlJobMoreInformation" xml:space="preserve">
    <value>SQL Server Agent differences in Azure SQL Managed Instance</value>
  </data>
  <data name="TransactSqlJobMoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/transact-sql-tsql-differences-sql-server#sql-server-agent</value>
  </data>
  <data name="WindowsAuthenticationTitle" xml:space="preserve">
    <value>Database users mapped with Windows authentication (integrated security) should be remapped to equivalent Azure AD identities.</value>
  </data>
  <data name="WindowsAuthenticationIssueCategory" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="WindowsAuthenticationDescription" xml:space="preserve">
    <value>Azure SQL Managed Instance supports three types of authentication 1) SQL Authentication, which uses a username and password 2) Azure Active Directory Authentication and 3) Windows Authentication, which both use identities managed by Azure Active Directory and is supported for managed and integrated domains. Windows logins and users not in Azure Active Directory are not supported in Azure SQL Managed Instance.</value>
  </data>
  <data name="WindowsAuthenticationRecommendation" xml:space="preserve">
    <value>Synchronize the local Active Directory with Azure Active Directory. The Windows identity can then be replaced with the equivalent Azure Active Directory identities. Alternatively, migrate to SQL Server on Azure Virtual Machine.</value>
  </data>
  <data name="WindowsAuthenticationMoreInformation" xml:space="preserve">
    <value>An overview of Azure SQL Database and SQL Managed Instance security capabilities</value>
  </data>
  <data name="WindowsAuthenticationMoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/azure/azure-sql/database/security-overview#authentication</value>
  </data>
  <data name="TraceFlagsTitle" xml:space="preserve">
    <value>Trace flags not supported in Azure SQL Managed Instance were found</value>
  </data>
  <data name="TraceFlagsIssueCategory" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="TraceFlagsDescription" xml:space="preserve">
    <value>Azure SQL Managed Instance supports only limited number of global trace flags. Session trace flags aren’t supported.</value>
  </data>
  <data name="TraceFlagsRecommendation" xml:space="preserve">
    <value>Review impacted objects section to see all trace flags that are not supported in Azure SQL Managed Instance and evaluate if they can be removed. Alternatively, migrate to SQL Server on Azure Virtual Machine.</value>
  </data>
  <data name="TraceFlagsMoreInformation" xml:space="preserve">
    <value>Trace Flags</value>
  </data>
  <data name="TraceFlagsMoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/sql/t-sql/database-console-commands/dbcc-traceon-trace-flags-transact-sql?view=sql-server-ver15#trace-flags</value>
  </data>
  <data name="SyntaxErrorTitle" xml:space="preserve">
    <value>Syntax issue on the source server</value>
  </data>
  <data name="SyntaxErrorIssueCategory" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="SyntaxErrorDescription" xml:space="preserve">
    <value>While parsing the objects on the source database, one or more syntax issues were found. Syntax issues on the source database indicate that some objects contain unsupported syntax in the server version and database compatibility level.</value>
  </data>
  <data name="SyntaxErrorRecommendation" xml:space="preserve">
    <value>Review the list of objects and issues reported, fix the syntax errors, and re-run assessment before migrating this database.</value>
  </data>
  <data name="SyntaxErrorMoreInformation" xml:space="preserve">
    <value />
  </data>
  <data name="SyntaxErrorMoreInformationlink" xml:space="preserve">
    <value />
  </data>
  <data name="MemoryOptimizedTablesTitle" xml:space="preserve">
    <value>Azure SQL Managed Instance General Purpose service tier does not support in-memory OLTP (memory optimized tables).</value>
  </data>
  <data name="MemoryOptimizedTablesIssueCategory" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="MemoryOptimizedTablesDescription" xml:space="preserve">
    <value>SQL Server provides an In-Memory OLTP capability. It allows usage of memory-optimized tables, memory-optimized table types, and natively compiled SQL modules to run workloads that have high-throughput and low-latency requirements for transactional processing. Azure SQL Managed Instance General Purpose service tier does not support in-memory OLTP (memory optimized tables). This feature is only supported in Azure SQL Managed Instance Business Critical service tier.</value>
  </data>
  <data name="MemoryOptimizedTablesRecommendation" xml:space="preserve">
    <value>If you have memory-optimized tables or memory-optimized table types in your on-premises SQL Server instance and you want to migrate to Azure SQL Database, you should either choose the Business Critical tier for your target Azure SQL database that supports In-Memory OLTP (OR) if you want to migrate to the General Purpose tier, remove memory-optimized tables, memory-optimized table types, and natively compiled SQL modules that interact with memory-optimized objects before migrating your databases. You can use the following T-SQL query to identify all objects that need to be removed before migration to the General Purpose tier: SELECT * FROM sys.tables WHERE is_memory_optimized=1, SELECT * FROM sys.table_types WHERE is_memory_optimized=1, SELECT * FROM sys.sql_modules WHERE uses_native_compilation=1</value>
  </data>
  <data name="MemoryOptimizedTablesMoreInformation" xml:space="preserve">
    <value>Azure SQL Managed Instance unsupported feature for General Purpose tier.</value>
  </data>
  <data name="MemoryOptimizedTablesMoreInformationlink" xml:space="preserve">
    <value>https://docs.microsoft.com/en-us/azure/azure-sql/migration-guides/managed-instance/sql-server-to-managed-instance-overview#in-memory-oltp-memory-optimized-tables</value>
  </data>
</root>