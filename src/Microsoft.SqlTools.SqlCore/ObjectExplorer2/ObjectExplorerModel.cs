//
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
//

// This file was generated by a T4 Template. Do not modify directly, instead update the SmoQueryModelDefinition.xml file
// and re-run the T4 template. This can be done in Visual Studio by right-click in and choosing "Run Custom Tool",
// or from the command-line on any platform by running "build.cmd -Target=CodeGen" or "build.sh -Target=CodeGen".

using System.Collections.Generic;

namespace Microsoft.SqlTools.SqlCore.ObjectExplorer2
{
	/// <summary>
	/// Database Node
	/// </summary>
	public class DatabaseNode : TreeNode
	{
		public DatabaseNode(TreeNode parent, ObjectMetadata metadata) : base(parent, metadata)
		{
			Icon = "Database";
			Type = "Database";
			IsLeaf = false;
		}
		public override void  LoadChildren(ObjectMetadata[] metadata)
		{
			this.Children = new List<TreeNode>();
			foreach(ObjectMetadata child in metadata)
			{
				if (child.Type == "Schema" && child.parentName == this.Name)
				{
					Children.Add(new SchemaNode(this, child));
				}
			}
		}
	}
	/// <summary>
	/// Schema Node
	/// </summary>
	public class SchemaNode : TreeNode
	{
		public SchemaNode(TreeNode parent, ObjectMetadata metadata) : base(parent, metadata)
		{
			Icon = "Schema";
			Type = "Schema";
			IsLeaf = false;
		}
		public override void  LoadChildren(ObjectMetadata[] metadata)
		{
			this.Children = new List<TreeNode>();
			Children.Add(new TablesFolder(this));		
			Children.Add(new ViewsFolder(this));		
			Children.Add(new StoredProceduresFolder(this));		
			Children.Add(new FunctionsFolder(this));		
		}
	}
	/// <summary>
	/// Table Node
	/// </summary>
	public class TableNode : TreeNode
	{
		public TableNode(TreeNode parent, ObjectMetadata metadata) : base(parent, metadata)
		{
			Icon = "Table";
			Type = "Table";
			IsLeaf = false;
		}
		public override void  LoadChildren(ObjectMetadata[] metadata)
		{
			this.Children = new List<TreeNode>();
			Children.Add(new TableColumnsFolder(this));		
			Children.Add(new IndexesFolder(this));		
		}
	}
	/// <summary>
	/// TableColumn Node
	/// </summary>
	public class TableColumnNode : TreeNode
	{
		public TableColumnNode(TreeNode parent, ObjectMetadata metadata) : base(parent, metadata)
		{
			Icon = "Column";
			Type = "Column";
			IsLeaf = true;
		}
		public override void  LoadChildren(ObjectMetadata[] metadata)
		{
			this.Children = new List<TreeNode>();
		}
	}
	/// <summary>
	/// Index Node
	/// </summary>
	public class IndexNode : TreeNode
	{
		public IndexNode(TreeNode parent, ObjectMetadata metadata) : base(parent, metadata)
		{
			Icon = "Index";
			Type = "Index";
			IsLeaf = true;
			AddParentInScriptingObject = true;
		}
		public override void  LoadChildren(ObjectMetadata[] metadata)
		{
			this.Children = new List<TreeNode>();
		}
	}
	/// <summary>
	/// View Node
	/// </summary>
	public class ViewNode : TreeNode
	{
		public ViewNode(TreeNode parent, ObjectMetadata metadata) : base(parent, metadata)
		{
			Icon = "View";
			Type = "View";
			IsLeaf = false;
		}
		public override void  LoadChildren(ObjectMetadata[] metadata)
		{
			this.Children = new List<TreeNode>();
			Children.Add(new ViewColumnsFolder(this));		
			Children.Add(new IndexesFolder(this));		
		}
	}
	/// <summary>
	/// ViewColumn Node
	/// </summary>
	public class ViewColumnNode : TreeNode
	{
		public ViewColumnNode(TreeNode parent, ObjectMetadata metadata) : base(parent, metadata)
		{
			Icon = "Column";
			Type = "Column";
			IsLeaf = true;
		}
		public override void  LoadChildren(ObjectMetadata[] metadata)
		{
			this.Children = new List<TreeNode>();
		}
	}
	/// <summary>
	/// StoredProcedure Node
	/// </summary>
	public class StoredProcedureNode : TreeNode
	{
		public StoredProcedureNode(TreeNode parent, ObjectMetadata metadata) : base(parent, metadata)
		{
			Icon = "StoredProcedure";
			Type = "StoredProcedure";
			IsLeaf = false;
		}
		public override void  LoadChildren(ObjectMetadata[] metadata)
		{
			this.Children = new List<TreeNode>();
			Children.Add(new StoredProcedureParametersFolder(this));		
		}
	}
	/// <summary>
	/// StoredProcedureParameter Node
	/// </summary>
	public class StoredProcedureParameterNode : TreeNode
	{
		public StoredProcedureParameterNode(TreeNode parent, ObjectMetadata metadata) : base(parent, metadata)
		{
			Icon = "Parameter";
			Type = "Parameter";
			IsLeaf = true;
		}
		public override void  LoadChildren(ObjectMetadata[] metadata)
		{
			this.Children = new List<TreeNode>();
		}
	}
	/// <summary>
	/// ScalarFunction Node
	/// </summary>
	public class ScalarFunctionNode : TreeNode
	{
		public ScalarFunctionNode(TreeNode parent, ObjectMetadata metadata) : base(parent, metadata)
		{
			Icon = "ScalarFunction";
			Type = "ScalarFunction";
			IsLeaf = false;
		}
		public override void  LoadChildren(ObjectMetadata[] metadata)
		{
			this.Children = new List<TreeNode>();
			Children.Add(new ScalarFunctionParametersFolder(this));		
		}
	}
	/// <summary>
	/// ScalarFunctionParameter Node
	/// </summary>
	public class ScalarFunctionParameterNode : TreeNode
	{
		public ScalarFunctionParameterNode(TreeNode parent, ObjectMetadata metadata) : base(parent, metadata)
		{
			Icon = "Parameter";
			Type = "Parameter";
			IsLeaf = true;
		}
		public override void  LoadChildren(ObjectMetadata[] metadata)
		{
			this.Children = new List<TreeNode>();
		}
	}
	/// <summary>
	/// TableValuedFunction Node
	/// </summary>
	public class TableValuedFunctionNode : TreeNode
	{
		public TableValuedFunctionNode(TreeNode parent, ObjectMetadata metadata) : base(parent, metadata)
		{
			Icon = "TableValuedFunction";
			Type = "TableValuedFunction";
			IsLeaf = false;
		}
		public override void  LoadChildren(ObjectMetadata[] metadata)
		{
			this.Children = new List<TreeNode>();
			Children.Add(new TableValuedFunctionParametersFolder(this));		
		}
	}
	/// <summary>
	/// TableValuedFunctionParameter Node
	/// </summary>
	public class TableValuedFunctionParameterNode : TreeNode
	{
		public TableValuedFunctionParameterNode(TreeNode parent, ObjectMetadata metadata) : base(parent, metadata)
		{
			Icon = "Parameter";
			Type = "Parameter";
			IsLeaf = true;
		}
		public override void  LoadChildren(ObjectMetadata[] metadata)
		{
			this.Children = new List<TreeNode>();
		}
	}
	public class TablesFolder : FolderNode
	{
		public TablesFolder(TreeNode parent) : base(parent)
		{
			Icon = "Folder";
			Name = "Tables";
			Type = "Tables";
			IsLeaf = false;
			Label = SR.SchemaHierarchy_Tables;
		}
		public override void  LoadChildren(ObjectMetadata[] metadata)
		{
			this.Children = new List<TreeNode>();
			foreach(ObjectMetadata child in metadata)
			{
				if (child.Type == "Table" && child.parentName == this.Parent.Name)
				{
					Children.Add(new TableNode(this, child));
				}
			}
		}
	}
	public class TableColumnsFolder : FolderNode
	{
		public TableColumnsFolder(TreeNode parent) : base(parent)
		{
			Icon = "Folder";
			Name = "TableColumns";
			Type = "TableColumns";
			IsLeaf = false;
			Label = SR.SchemaHierarchy_Columns;
		}
		public override void  LoadChildren(ObjectMetadata[] metadata)
		{
			this.Children = new List<TreeNode>();
			foreach(ObjectMetadata child in metadata)
			{
				if (child.Type == "TableColumn" && child.parentName == this.Parent.Name)
				{
					Children.Add(new TableColumnNode(this, child));
				}
			}
		}
	}
	public class IndexesFolder : FolderNode
	{
		public IndexesFolder(TreeNode parent) : base(parent)
		{
			Icon = "Folder";
			Name = "Indexes";
			Type = "Indexes";
			IsLeaf = false;
			Label = SR.SchemaHierarchy_Indexes;
		}
		public override void  LoadChildren(ObjectMetadata[] metadata)
		{
			this.Children = new List<TreeNode>();
			foreach(ObjectMetadata child in metadata)
			{
				if (child.Type == "Index" && child.parentName == this.Parent.Name)
				{
					Children.Add(new IndexNode(this, child));
				}
			}
		}
	}
	public class ViewsFolder : FolderNode
	{
		public ViewsFolder(TreeNode parent) : base(parent)
		{
			Icon = "Folder";
			Name = "Views";
			Type = "Views";
			IsLeaf = false;
			Label = SR.SchemaHierarchy_Views;
		}
		public override void  LoadChildren(ObjectMetadata[] metadata)
		{
			this.Children = new List<TreeNode>();
			foreach(ObjectMetadata child in metadata)
			{
				if (child.Type == "View" && child.parentName == this.Parent.Name)
				{
					Children.Add(new ViewNode(this, child));
				}
			}
		}
	}
	public class ViewColumnsFolder : FolderNode
	{
		public ViewColumnsFolder(TreeNode parent) : base(parent)
		{
			Icon = "Folder";
			Name = "ViewColumns";
			Type = "ViewColumns";
			IsLeaf = false;
			Label = SR.SchemaHierarchy_Columns;
		}
		public override void  LoadChildren(ObjectMetadata[] metadata)
		{
			this.Children = new List<TreeNode>();
			foreach(ObjectMetadata child in metadata)
			{
				if (child.Type == "ViewColumn" && child.parentName == this.Parent.Name)
				{
					Children.Add(new ViewColumnNode(this, child));
				}
			}
		}
	}
	public class StoredProceduresFolder : FolderNode
	{
		public StoredProceduresFolder(TreeNode parent) : base(parent)
		{
			Icon = "Folder";
			Name = "StoredProcedures";
			Type = "StoredProcedures";
			IsLeaf = false;
			Label = SR.SchemaHierarchy_StoredProcedures;
		}
		public override void  LoadChildren(ObjectMetadata[] metadata)
		{
			this.Children = new List<TreeNode>();
			foreach(ObjectMetadata child in metadata)
			{
				if (child.Type == "StoredProcedure" && child.parentName == this.Parent.Name)
				{
					Children.Add(new StoredProcedureNode(this, child));
				}
			}
		}
	}
	public class StoredProcedureParametersFolder : FolderNode
	{
		public StoredProcedureParametersFolder(TreeNode parent) : base(parent)
		{
			Icon = "Folder";
			Name = "StoredProcedureParameters";
			Type = "StoredProcedureParameters";
			IsLeaf = false;
			Label = SR.SchemaHierarchy_Parameters;
		}
		public override void  LoadChildren(ObjectMetadata[] metadata)
		{
			this.Children = new List<TreeNode>();
			foreach(ObjectMetadata child in metadata)
			{
				if (child.Type == "StoredProcedureParameter" && child.parentName == this.Parent.Name)
				{
					Children.Add(new StoredProcedureParameterNode(this, child));
				}
			}
		}
	}
	public class FunctionsFolder : FolderNode
	{
		public FunctionsFolder(TreeNode parent) : base(parent)
		{
			Icon = "Folder";
			Name = "Functions";
			Type = "Functions";
			IsLeaf = false;
			Label = SR.SchemaHierarchy_Functions;
		}
		public override void  LoadChildren(ObjectMetadata[] metadata)
		{
			this.Children = new List<TreeNode>();
			Children.Add(new ScalarFunctionsFolder(this));		
			Children.Add(new TableValuedFunctionsFolder(this));		
		}
	}
	public class ScalarFunctionsFolder : FolderNode
	{
		public ScalarFunctionsFolder(TreeNode parent) : base(parent)
		{
			Icon = "Folder";
			Name = "ScalarFunctions";
			Type = "ScalarFunctions";
			IsLeaf = false;
			Label = SR.SchemaHierarchy_ScalarValuedFunctions;
		}
		public override void  LoadChildren(ObjectMetadata[] metadata)
		{
			this.Children = new List<TreeNode>();
			foreach(ObjectMetadata child in metadata)
			{
				if (child.Type == "ScalarFunction" && child.parentName == this.Parent.Parent.Name)
				{
					Children.Add(new ScalarFunctionNode(this, child));
				}
			}
		}
	}
	public class ScalarFunctionParametersFolder : FolderNode
	{
		public ScalarFunctionParametersFolder(TreeNode parent) : base(parent)
		{
			Icon = "Folder";
			Name = "ScalarFunctionParameters";
			Type = "ScalarFunctionParameters";
			IsLeaf = false;
			Label = SR.SchemaHierarchy_Parameters;
		}
		public override void  LoadChildren(ObjectMetadata[] metadata)
		{
			this.Children = new List<TreeNode>();
			foreach(ObjectMetadata child in metadata)
			{
				if (child.Type == "ScalarFunctionParameter" && child.parentName == this.Parent.Name)
				{
					Children.Add(new ScalarFunctionParameterNode(this, child));
				}
			}
		}
	}
	public class TableValuedFunctionsFolder : FolderNode
	{
		public TableValuedFunctionsFolder(TreeNode parent) : base(parent)
		{
			Icon = "Folder";
			Name = "TableValuedFunctions";
			Type = "TableValuedFunctions";
			IsLeaf = false;
			Label = SR.SchemaHierarchy_TableValuedFunctions;
		}
		public override void  LoadChildren(ObjectMetadata[] metadata)
		{
			this.Children = new List<TreeNode>();
			foreach(ObjectMetadata child in metadata)
			{
				if (child.Type == "TableValuedFunction" && child.parentName == this.Parent.Parent.Name)
				{
					Children.Add(new TableValuedFunctionNode(this, child));
				}
			}
		}
	}
	public class TableValuedFunctionParametersFolder : FolderNode
	{
		public TableValuedFunctionParametersFolder(TreeNode parent) : base(parent)
		{
			Icon = "Folder";
			Name = "TableValuedFunctionParameters";
			Type = "TableValuedFunctionParameters";
			IsLeaf = false;
			Label = SR.SchemaHierarchy_Parameters;
		}
		public override void  LoadChildren(ObjectMetadata[] metadata)
		{
			this.Children = new List<TreeNode>();
			foreach(ObjectMetadata child in metadata)
			{
				if (child.Type == "TableValuedFunctionParameter" && child.parentName == this.Parent.Name)
				{
					Children.Add(new TableValuedFunctionParameterNode(this, child));
				}
			}
		}
	}

	public static class ObjectExplorerModelQueries
	{
		public static Dictionary<string, string> Queries = new Dictionary<string, string>()
		{
			{ 
				"Schema", 
				@"
  SELECT
  S.name AS schemaName,
  S.name AS objectName,
  DB_NAME() AS parentName,
  S.name AS displayName,
  'Schema' AS type,
  NULL AS subType
From
  sys.schemas AS S
where s.name not in (
  'sys',
  'db_owner',
  'db_accessadmin',
  'db_securityadmin',
  'db_ddladmin',
  'db_backupoperator',
  'db_datareader',
  'db_datawriter',
  'db_denydatareader',
  'db_denydatawriter',
  'INFORMATION_SCHEMA',
  'guest'
)
" 
			},
			{ 
				"Table", 
				@"
  SELECT
      S.name AS schemaName,
      T.name AS objectName,
      S.name AS parentName,
      CONCAT (S.name, '.', T.name) AS displayName,
      'Table' AS ObjectType,
      NULL AS subType
  FROM
      sys.schemas AS S
      JOIN sys.tables AS T ON S.schema_id = T.schema_id
  where
      t.temporal_type_desc = 'SYSTEM_VERSIONED_TEMPORAL_TABLE'
      or t.temporal_type_desc = 'NON_TEMPORAL_TABLE'
  " 
			},
			{ 
				"TableColumn", 
				@"
    select 
    s.name as schemaName,
    c.name as objectName,
    t.name as parentName,
    c.name + 
    ' (' +
    tp.name +
    -- logic for length printing
    CASE  
        when tp.name IN ('char', 'nchar', 'binary', 'varchar', 'nvarchar', 'varbinary') THEN
        CASE 
            when c.max_length = -1 THEN '(max)'
            ELSE '(' +  CAST(c.max_length AS NVARCHAR) + ')'
        END 
        when tp.name IN ('datetime2', 'time', 'datetimeoffset') THEN '(' +  CAST(c.scale AS NVARCHAR) + ')'
        ELSE  ''
    END +
    -- logic for null/notnull
    CASE
        when c.is_nullable = 1 then ', null'
        ELSE ', not null'
    END +
     ')' 
     as displayName,
    'TableColumn' as type,
    NULL AS subType
FROM 
    sys.columns c
INNER JOIN 
    sys.tables t ON c.object_id = t.object_id
INNER JOIN
    sys.types tp ON c.user_type_id = tp.user_type_id
INNER JOIN
    sys.schemas s ON s.schema_id = t.schema_id
    " 
			},
			{ 
				"Index", 
				@"
  SELECT
      S.name AS schemaName,
      I.name AS objectName,
      O.name AS parentName,
      I.name + ' (' +
      CASE when I.is_unique = 1 THEN 'Unique' ELSE 'Non-Unique' END + 
      ', ' +
      CASE when I.index_id = 1 THEN 'Clustered' ELSE 'Non-Clustered' END +
      ')'
      AS displayName,
      'Index' AS ObjectType,
      CASE when I.is_primary_key = 1 THEN 'PKINDEX' ELSE 'INDEX' END subType
  FROM
      sys.schemas AS S
      JOIN (select object_id, name, schema_id FROM sys.tables UNION ALL select object_id, name, schema_id from sys.views) AS O ON O.schema_id = S.schema_id
      JOIN sys.indexes AS I ON I.object_id = O.object_id
  Where I.name IS NOT NULL
  " 
			},
			{ 
				"View", 
				@"
  SELECT
      S.name AS schemaName,
      V.name AS objectName,
      S.name AS parentName,
      CONCAT (S.name, '.', V.name) AS displayName,
      'View' AS ObjectType,
      NULL AS subType
  FROM
      sys.schemas AS S
      JOIN sys.views AS V ON S.schema_id = V.schema_id
  " 
			},
			{ 
				"ViewColumn", 
				@"
    select 
    s.name as schemaName,
    c.name as objectName,
    t.name as parentName,
    c.name + 
    ' (' +
    tp.name +
    -- logic for length printing
    CASE  
        when tp.name IN ('char', 'nchar', 'binary', 'varchar', 'nvarchar', 'varbinary') THEN
        CASE 
            when c.max_length = -1 THEN '(max)'
            ELSE '(' +  CAST(c.max_length AS NVARCHAR) + ')'
        END 
        when tp.name IN ('datetime2', 'time', 'datetimeoffset') THEN '(' +  CAST(c.scale AS NVARCHAR) + ')'
        ELSE  ''
    END +
    -- logic for null/notnull
    CASE
        when c.is_nullable = 1 then ', null'
        ELSE ', not null'
    END +
     ')' 
     as displayName,
    'ViewColumn' as type,
    NULL AS subType
FROM
    sys.columns c
INNER JOIN
    sys.views t ON c.object_id = t.object_id
INNER JOIN
    sys.types tp ON c.user_type_id = tp.user_type_id
INNER JOIN
    sys.schemas s ON s.schema_id = t.schema_id
" 
			},
			{ 
				"StoredProcedure", 
				@"
  SELECT
      S.name AS schemaName,
      P.name AS objectName,
      S.name AS parentName,
      CONCAT (S.name, '.', P.name) AS displayName,
      'StoredProcedure' AS ObjectType,
      NULL AS subType
  FROM
      sys.schemas AS S
      JOIN sys.procedures AS P ON S.schema_id = P.schema_id
  " 
			},
			{ 
				"StoredProcedureParameter", 
				@"
    SELECT 
    S.name AS schemaName,
    p.name AS objectName,
    SP.name AS parentName,
    p.name +  ' (' +  TP.name + ', ' +
    CASE WHEN P.is_output = 1 THEN 'Output' ELSE 'Input' END + ', ' +
    CASE WHEN P.has_default_value = 1 THEN 'Default' ELSE 'No default' END + ')'
    AS displayName, 
    'StoredProcedureParameter' AS type,
    CASE WHEN P.is_output = 1 THEN 'OutputParameter' ELSE 'InputParameter' END AS subtype
FROM sys.schemas AS S
JOIN sys.procedures AS SP ON S.schema_id = SP.schema_id
JOIN sys.parameters AS P ON SP.object_id = P.object_id
JOIN sys.types AS TP ON P.user_type_id = TP.user_type_id
" 
			},
			{ 
				"ScalarFunction", 
				@"
  SELECT
      S.name AS schemaName,
      P.name AS objectName,
      S.name AS parentName,
      CONCAT (S.name, '.', P.name) AS displayName,
      'ScalarFunction' AS ObjectType,
      NULL AS subType
  FROM
      sys.schemas AS S
      JOIN sys.objects AS P ON S.schema_id = P.schema_id
  WHERE
      P.type = 'FN'
  " 
			},
			{ 
				"ScalarFunctionParameter", 
				@"
    SELECT 
    S.name AS schemaName,
    p.name AS objectName,
    SP.name AS parentName,
    p.name +  ' (' +  TP.name + ', ' +
    CASE WHEN P.is_output = 1 THEN 'Output' ELSE 'Input' END + ', ' +
    CASE WHEN P.has_default_value = 1 THEN 'Default' ELSE 'No default' END + ')'
    AS displayName, 
    'ScalarFunctionParameter' AS type,
    CASE WHEN P.is_output = 1 THEN 'OutputParameter' ELSE 'InputParameter' END AS subtype
FROM sys.schemas AS S
INNER JOIN sys.objects AS SP ON S.schema_id = SP.schema_id
INNER JOIN sys.parameters AS P ON SP.object_id = P.object_id
JOIN sys.types AS TP ON P.user_type_id = TP.user_type_id
WHERE SP.type = 'FN' AND (p.name != NULL OR p.name != '')
" 
			},
			{ 
				"TableValuedFunction", 
				@"
  SELECT
      S.name AS schemaName,
      P.name AS objectName,
      S.name AS parentName,
      CONCAT (S.name, '.', P.name) AS displayName,
      'TableValuedFunction' AS ObjectType,
      NULL AS subType
  FROM
      sys.schemas AS S
      JOIN sys.objects AS P ON S.schema_id = P.schema_id
  WHERE
      P.type = 'IF' OR P.type = 'TF'
  " 
			},
			{ 
				"TableValuedFunctionParameter", 
				@"
    SELECT 
    S.name AS schemaName,
    p.name AS objectName,
    SP.name AS parentName,
    p.name +  ' (' +  TP.name + ', ' +
    CASE WHEN P.is_output = 1 THEN 'Output' ELSE 'Input' END + ', ' +
    CASE WHEN P.has_default_value = 1 THEN 'Default' ELSE 'No default' END + ')'
    AS displayName, 
    'TableValuedFunctionParameter' AS type,
    CASE WHEN P.is_output = 1 THEN 'OutputParameter' ELSE 'InputParameter' END AS subtype
FROM sys.schemas AS S
INNER JOIN sys.objects AS SP ON S.schema_id = SP.schema_id
INNER JOIN sys.parameters AS P ON SP.object_id = P.object_id
JOIN sys.types AS TP ON P.user_type_id = TP.user_type_id
WHERE SP.type = 'IF' OR SP.type = 'TF' AND (p.name != NULL OR p.name != '')
" 
			},
		};
	}
	
}

