<ObjectExplorerModel>
  <Node Name="Database" Type="Database" Icon="Database" isLeaf="false">
    <ChildQuerier Type="Schema" />
  </Node>

  <!-- Schema Query -->
  <Querier Name="Schema" Node="Schema" Query="
  SELECT
  S.name AS schemaName,
  S.name AS objectName,
  DB_NAME() AS parentName,
  S.name AS displayName,
  'Schema' AS type,
  NULL AS subType
From
  sys.schemas AS S
where s.name not in (
  'sys',
  'db_owner',
  'db_accessadmin',
  'db_securityadmin',
  'db_ddladmin',
  'db_backupoperator',
  'db_datareader',
  'db_datawriter',
  'db_denydatareader',
  'db_denydatawriter',
  'INFORMATION_SCHEMA',
  'guest'
)
" />

  <!-- Schema Node -->
  <Node Name="Schema" Type="Schema" Icon="Schema" isLeaf="false">
    <ChildFolder Name="Tables" />
    <ChildFolder Name="Views" />
    <ChildFolder Name="StoredProcedures" />
    <ChildFolder Name="Functions"/>
  </Node>

  <!-- Tables folder definition-->
  <Folder Name="Tables" Label="SR.SchemaHierarchy_Tables" ParentName = "Parent.Name">
    <ChildQuerier Type="Table" />
  </Folder>

  <!-- Table Query -->
  <Querier Name="Table" Node="Table" Query="
  SELECT
      S.name AS schemaName,
      T.name AS objectName,
      S.name AS parentName,
      CONCAT (S.name, '.', T.name) AS displayName,
      'Table' AS ObjectType,
      NULL AS subType
  FROM
      sys.schemas AS S
      JOIN sys.tables AS T ON S.schema_id = T.schema_id
  where
      t.temporal_type_desc = 'SYSTEM_VERSIONED_TEMPORAL_TABLE'
      or t.temporal_type_desc = 'NON_TEMPORAL_TABLE'
  " />

  <!-- Table Node -->
  <Node Name="Table" Type="Table" Icon="Table" isLeaf="false">
    <ChildFolder Name="TableColumns" />
  </Node>

  <!-- Columns folder definition-->
  <Folder Name="TableColumns" Label="SR.SchemaHierarchy_Columns" ParentName = "Parent.Name">
    <ChildQuerier Type="TableColumn" />
  </Folder>

  <!-- Table Columns Query -->
  <Querier 
    Name="TableColumn" 
    Node="Column" 
    Query="
    select 
    s.name as schemaName,
    c.name as objectName,
    t.name as parentName,
    c.name + 
    ' (' +
    tp.name +
    -- logic for length printing
    CASE  
        when tp.name IN ('char', 'nchar', 'binary', 'varchar', 'nvarchar', 'varbinary') THEN
        CASE 
            when c.max_length = -1 THEN '(max)'
            ELSE '(' +  CAST(c.max_length AS NVARCHAR) + ')'
        END 
        when tp.name IN ('datetime2', 'time', 'datetimeoffset') THEN '(' +  CAST(c.scale AS NVARCHAR) + ')'
        ELSE  ''
    END +
    -- logic for null/notnull
    CASE
        when c.is_nullable = 1 then ', null'
        ELSE ', not null'
    END +
     ')' 
     as displayName,
    'TableColumn' as type,
    NULL AS subType
FROM 
    sys.columns c
INNER JOIN 
    sys.tables t ON c.object_id = t.object_id
INNER JOIN
    sys.types tp ON c.user_type_id = tp.user_type_id
INNER JOIN
    sys.schemas s ON s.schema_id = t.schema_id
    "
  />

  <!-- Column Node -->
  <Node Name="TableColumn" Type="Column" Icon="Column" isLeaf="true" />


  <!-- Views folder definition-->
  <Folder Name="Views" Label="SR.SchemaHierarchy_Views" ParentName = "Parent.Name">
    <ChildQuerier Type="View" />
  </Folder>

  <!-- View Query -->
  <Querier Name="View" Node="View" Query="
  SELECT
      S.name AS schemaName,
      V.name AS objectName,
      S.name AS parentName,
      CONCAT (S.name, '.', V.name) AS displayName,
      'View' AS ObjectType,
      NULL AS subType
  FROM
      sys.schemas AS S
      JOIN sys.views AS V ON S.schema_id = V.schema_id
  " />

  <!-- View Node -->
  <Node Name="View" Type="View" Icon="View" isLeaf="false">
    <ChildFolder Name="ViewColumns" />
  </Node>

  <!-- Columns folder definition-->
  <Folder Name="ViewColumns" Label="SR.SchemaHierarchy_Columns" ParentName = "Parent.Name">
    <ChildQuerier Type="ViewColumn" />
  </Folder>
  
  <!-- Column Query -->
  <Querier 
    Name="ViewColumn" 
    Node="Column" 
    Query="
    select 
    s.name as schemaName,
    c.name as objectName,
    t.name as parentName,
    c.name + 
    ' (' +
    tp.name +
    -- logic for length printing
    CASE  
        when tp.name IN ('char', 'nchar', 'binary', 'varchar', 'nvarchar', 'varbinary') THEN
        CASE 
            when c.max_length = -1 THEN '(max)'
            ELSE '(' +  CAST(c.max_length AS NVARCHAR) + ')'
        END 
        when tp.name IN ('datetime2', 'time', 'datetimeoffset') THEN '(' +  CAST(c.scale AS NVARCHAR) + ')'
        ELSE  ''
    END +
    -- logic for null/notnull
    CASE
        when c.is_nullable = 1 then ', null'
        ELSE ', not null'
    END +
     ')' 
     as displayName,
    'ViewColumn' as type,
    NULL AS subType
FROM
    sys.columns c
INNER JOIN
    sys.views t ON c.object_id = t.object_id
INNER JOIN
    sys.types tp ON c.user_type_id = tp.user_type_id
INNER JOIN
    sys.schemas s ON s.schema_id = t.schema_id
"  />

  <!-- Column Node -->
  <Node Name="ViewColumn" Type="Column" Icon="Column" isLeaf="true" />

  <!-- Stored Procedures folder definition-->
  <Folder Name="StoredProcedures" Label="SR.SchemaHierarchy_StoredProcedures" ParentName = "Parent.Name">
    <ChildQuerier Type="StoredProcedure" />
  </Folder>

  <!-- Stored Procedure Query -->
  <Querier Name="StoredProcedure" Node="StoredProcedure" Query="
  SELECT
      S.name AS schemaName,
      P.name AS objectName,
      S.name AS parentName,
      CONCAT (S.name, '.', P.name) AS displayName,
      'StoredProcedure' AS ObjectType,
      NULL AS subType
  FROM
      sys.schemas AS S
      JOIN sys.procedures AS P ON S.schema_id = P.schema_id
  " />

  <!-- Stored Procedure Node -->
  <Node Name="StoredProcedure" Type="StoredProcedure" Icon="StoredProcedure" isLeaf="false" >
    <ChildFolder Name="StoredProcedureParameters" />
  </Node>

  <!-- Parameters folder definition-->
  <Folder Name="StoredProcedureParameters" Label="SR.SchemaHierarchy_Parameters" ParentName = "Parent.Name">
    <ChildQuerier Type="StoredProcedureParameter" />
  </Folder>

  <!-- Parameter Query -->
  <Querier 
    Name="StoredProcedureParameter" 
    Node="StoredProcedureParameter" 
    Query="
    SELECT 
    S.name AS schemaName,
    p.name AS objectName,
    SP.name AS parentName,
    p.name +  ' (' +  TP.name + ', ' +
    CASE WHEN P.is_output = 1 THEN 'Output' ELSE 'Input' END + ', ' +
    CASE WHEN P.has_default_value = 1 THEN 'Default' ELSE 'No default' END + ')'
    AS displayName, 
    'StoredProcedureParameter' AS type,
    CASE WHEN P.is_output = 1 THEN 'OutputParameter' ELSE 'InputParameter' END AS subtype
FROM sys.schemas AS S
JOIN sys.procedures AS SP ON S.schema_id = SP.schema_id
JOIN sys.parameters AS P ON SP.object_id = P.object_id
JOIN sys.types AS TP ON P.user_type_id = TP.user_type_id
"  />
  
    <!-- Parameter Node -->
    <Node Name="StoredProcedureParameter" Type="Parameter" Icon="Parameter" isLeaf="true" />

  <!-- Functions folder definition-->
  <Folder Name="Functions" Label="SR.SchemaHierarchy_Functions" ParentName = "Parent.Name">
    <ChildFolder Name="ScalarFunctions" />
    <ChildFolder Name="TableValuedFunctions" />
  </Folder>

  <!-- Scalar Functions folder definition-->
  <Folder Name="ScalarFunctions" Label="SR.SchemaHierarchy_ScalarValuedFunctions" ParentName = "Parent.Parent.Name">
    <ChildQuerier Type="ScalarFunction" />
  </Folder>

  <!-- Scalar Function Query -->
  <Querier Name="ScalarFunction" Node="ScalarFunction" Query="
  SELECT
      S.name AS schemaName,
      P.name AS objectName,
      S.name AS parentName,
      CONCAT (S.name, '.', P.name) AS displayName,
      'ScalarFunction' AS ObjectType,
      NULL AS subType
  FROM
      sys.schemas AS S
      JOIN sys.objects AS P ON S.schema_id = P.schema_id
  WHERE
      P.type = 'FN'
  " />

  <!-- Scalar Function Node -->
  <Node Name="ScalarFunction" Type="ScalarFunction" Icon="ScalarFunction" isLeaf="false" >
    <ChildFolder Name="ScalarFunctionParameters" />
  </Node>

  <Folder Name="ScalarFunctionParameters" Label="SR.SchemaHierarchy_Parameters" ParentName = "Parent.Name">
    <ChildQuerier Type="ScalarFunctionParameter" />
  </Folder>

  <!-- Scalar Function Parameter Query -->
  <Querier 
    Name="ScalarFunctionParameter" 
    Node="ScalarFunctionParameter" 
    Query="
    SELECT 
    S.name AS schemaName,
    p.name AS objectName,
    SP.name AS parentName,
    p.name +  ' (' +  TP.name + ', ' +
    CASE WHEN P.is_output = 1 THEN 'Output' ELSE 'Input' END + ', ' +
    CASE WHEN P.has_default_value = 1 THEN 'Default' ELSE 'No default' END + ')'
    AS displayName, 
    'ScalarFunctionParameter' AS type,
    CASE WHEN P.is_output = 1 THEN 'OutputParameter' ELSE 'InputParameter' END AS subtype
FROM sys.schemas AS S
INNER JOIN sys.objects AS SP ON S.schema_id = SP.schema_id
INNER JOIN sys.parameters AS P ON SP.object_id = P.object_id
JOIN sys.types AS TP ON P.user_type_id = TP.user_type_id
WHERE SP.type = 'FN' AND (p.name != NULL OR p.name != '')
"  />
  
    <!-- Scalar Function Parameter Node -->
    <Node Name="ScalarFunctionParameter" Type="Parameter" Icon="Parameter" isLeaf="true" />


  <!-- Table Valued Functions folder definition-->
  <Folder Name="TableValuedFunctions" Label="SR.SchemaHierarchy_TableValuedFunctions" ParentName = "Parent.Parent.Name">
    <ChildQuerier Type="TableValuedFunction" />
  </Folder>

  <!-- Table Valued Function Query -->
  <Querier Name="TableValuedFunction" Node="TableValuedFunction" Query="
  SELECT
      S.name AS schemaName,
      P.name AS objectName,
      S.name AS parentName,
      CONCAT (S.name, '.', P.name) AS displayName,
      'TableValuedFunction' AS ObjectType,
      NULL AS subType
  FROM
      sys.schemas AS S
      JOIN sys.objects AS P ON S.schema_id = P.schema_id
  WHERE
      P.type = 'IF' OR P.type = 'TF'
  " />

  <!-- Table Valued Function Node -->
  <Node Name="TableValuedFunction" Type="TableValuedFunction" Icon="TableValuedFunction" isLeaf="false" >
    <ChildFolder Name="TableValuedFunctionParameters" />
  </Node>

  <Folder Name="TableValuedFunctionParameters" Label="SR.SchemaHierarchy_Parameters" ParentName = "Parent.Name">
    <ChildQuerier Type="TableValuedFunctionParameter" />
  </Folder>

  <!-- Table Valued Function Parameter Query -->
  <Querier 
    Name="TableValuedFunctionParameter" 
    Node="TableValuedFunctionParameter" 
    Query="
    SELECT 
    S.name AS schemaName,
    p.name AS objectName,
    SP.name AS parentName,
    p.name +  ' (' +  TP.name + ', ' +
    CASE WHEN P.is_output = 1 THEN 'Output' ELSE 'Input' END + ', ' +
    CASE WHEN P.has_default_value = 1 THEN 'Default' ELSE 'No default' END + ')'
    AS displayName, 
    'TableValuedFunctionParameter' AS type,
    CASE WHEN P.is_output = 1 THEN 'OutputParameter' ELSE 'InputParameter' END AS subtype
FROM sys.schemas AS S
INNER JOIN sys.objects AS SP ON S.schema_id = SP.schema_id
INNER JOIN sys.parameters AS P ON SP.object_id = P.object_id
JOIN sys.types AS TP ON P.user_type_id = TP.user_type_id
WHERE SP.type = 'IF' OR SP.type = 'TF' AND (p.name != NULL OR p.name != '')
"  />
  
    <!-- Table Valued Function Parameter Node -->
    <Node Name="TableValuedFunctionParameter" Type="Parameter" Icon="Parameter" isLeaf="true" />

  
</ObjectExplorerModel>