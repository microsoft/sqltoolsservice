<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output  extension=".cs" #>
<#@ assembly name="System.Xml.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
//
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
//

// This file was generated by a T4 Template. Do not modify directly, instead update the SmoQueryModelDefinition.xml file
// and re-run the T4 template. This can be done in Visual Studio by right-click in and choosing "Run Custom Tool",
// or from the command-line on any platform by running "build.cmd -Target=CodeGen" or "build.sh -Target=CodeGen".

namespace Microsoft.SqlTools.SqlCore.ObjectExplorer2
{
<#
	var directory = Path.GetDirectoryName(Host.TemplateFile);
	string xmlFile = Path.Combine(directory, "ObjectExplorerModel.xml");
	XmlDocument doc = new XmlDocument();
	doc.Load(xmlFile);

	XmlNodeList nodes = doc.SelectNodes("//Node");

	foreach (var node in nodes)
	{
		var nodeName = ((XmlNode)node).Attributes["Name"].Value;
		var nodeType = ((XmlNode)node).Attributes["Type"].Value;
		var nodeIcon = ((XmlNode)node).Attributes["Icon"].Value;

#>
	/// <summary>
	/// <#= nodeName #> Node
	/// </summary>
	public class <#= nodeName #>Node : TreeNode
	{
		public <#= nodeName #>Node() : base()
		{
			Icon = "<#= nodeIcon #>";
			Type = "<#= nodeType #>";
		}

		public override TreeNode[] GetChildren()
		{
			return new TreeNode[] { };
		}
	}
<#
	}

	XmlNodeList folders = doc.SelectNodes("//Folder");

	foreach (var folder in folders)
	{
		var folderName = ((XmlNode)folder).Attributes["Name"].Value;
		var folderIcon = ((XmlNode)folder).Attributes["Label"].Value;
#>
	/// <summary>
	/// <#= folderName #> Folder
	/// </summary>
	public class <#= folderName #>Folder : TreeNode
	{
		public <#= folderName #>Folder() : base()
		{
			Label = <#= folderIcon #>;
			Type = "Folder";
			Icon = "Folder";
		}

		public override TreeNode[] GetChildren()
		{
			return new TreeNode[] { };
		}
	}
<#
	}

	XmlNodeList queriers = doc.SelectNodes("//Querier");

	foreach (var querier in queriers)
	{
		var querierName = ((XmlNode)querier).Attributes["Name"].Value;
		var querierNodeName = ((XmlNode)querier).Attributes["Node"].Value;

#>
	/// <summary>
	/// <#= querierName #> Querier
	/// </summary>
	public class <#= querierName #>Querier 
	{
		public querier
		public <#= querierName #>Querier()
		{
		}
	}
<#
	}	
#>
	
}