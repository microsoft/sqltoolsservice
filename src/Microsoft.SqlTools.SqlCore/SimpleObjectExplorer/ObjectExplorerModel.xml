<!-- 
  This xml schema defined the object explorer model.

  Node: A node is a container of childFolder or childQuerier. 
    Attributes:
      Name: (Required) The name of the node. 
      Type: (Required) The type of the node.
      IsLeaf: (Required) Whether the node is a leaf node.
      AddParentInfoToScriptingObject: (Optional) Whether to add parent info to the scripting object. Default is false.
                                      Some scripting object (e.g. Index) needs to add parent info to the scripting object.
      ScriptingObjectType: (Optional) The scripting object type. Default is the same as the node type.
                            Some scripting object can be different from the node type (e.g. ScalarFunction and TableValuedFunction).
    Children:
      ChildFolder: (Optional) The child folder of the node.
        Attributes:
          Name: (Required) The name of the child folder.
      ChildQuerier: (Optional) The child querier of the node. 
        Attributes:
          NodeType: (Required) The node type of the child querier. A querier node of the same node type must be present in the model.
    
  Folder: A folder is a node of type folder. It used to organize child objects within parent node.
    Attributes:
      Name: (Required) The name of the folder.
      Label: (Required) The localized label of the folder. Strings must be defined in SR.strings.
      ParentName: (Required) The parent name of the folder. It can be a node name or a folder name.
    Children:
      ChildFolder: (Optional) The child folder of the folder.
        Attributes:
          Name: (Required) The name of the child folder.
      ChildQuerier: (Optional) The child querier of the folder.
        Attributes:
          NodeType: (Required) The node type of the child querier. A querier node of the same node type must be present in the model.

  Querier: A querier contains a query to fetch nodes of a specific type.
    Attributes:
      NodeType: (Required) The node type of the querier.
      Query: (Required) The query to fetch nodes of the node type. The query should return columns in 
              schema_name, object_name, parent_name, display_name, object_type, object_sub_type order. This order cannot be changed.
              For columns that are not applicable, return NULL.
  
  The root of the model is Database node.
-->
<ObjectExplorerModel>
  <Node Name="Database" Type="Database" IsLeaf="false">
    <ChildQuerier NodeType="Schema" SchemaMatching="false" /> // Since database is above schema, we don't need to match schema
  </Node>

  <!-- Schema Query -->
  <Querier NodeType="Schema" Query="
  SELECT
    SCHEMA_NAME AS schema_name,
    SCHEMA_NAME AS object_name,
    CATALOG_NAME AS parent_name,
    SCHEMA_NAME AS display_name,
    'Schema' AS object_type,
    NULL AS object_sub_type
  FROM
    INFORMATION_SCHEMA.SCHEMATA
  WHERE
  SCHEMA_NAME NOT IN (
    'sys',
    'db_owner',
    'db_accessadmin',
    'db_securityadmin',
    'db_ddladmin',
    'db_backupoperator',
    'db_datareader',
    'db_datawriter',
    'db_denydatareader',
    'db_denydatawriter',
    'INFORMATION_SCHEMA',
    'guest'
  )
" />

  <!-- Schema Node -->
  <Node Name="Schema" Type="Schema" IsLeaf="false">
    <ChildFolder Name="Tables" />
    <ChildFolder Name="Views" />
    <ChildFolder Name="StoredProcedures" />
    <ChildFolder Name="Functions"/>
  </Node>

  <!-- Tables folder definition-->
  <Folder Name="Tables" Label="SR.SchemaHierarchy_Tables" ParentName = "Parent.Name">
    <ChildQuerier NodeType="Table" />
  </Folder>

  <!-- Table Query -->
  <Querier NodeType="Table" Query="
  SELECT
    TABLE_SCHEMA AS schema_name,
    TABLE_NAME AS object_name,
    TABLE_SCHEMA AS parent_name,
    CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) AS display_name,
    'Table' AS object_type,
    NULL AS object_sub_type
  FROM
    INFORMATION_SCHEMA.TABLES
  WHERE
    TABLE_TYPE = 'BASE TABLE'
  " />

  <!-- Table Node -->
  <Node Name="Table" Type="Table" IsLeaf="false">
    <ChildFolder Name="Columns" />
    <ChildFolder Name="Indexes" />
  </Node>

  <!-- Columns folder definition-->
  <Folder Name="Columns" Label="SR.SchemaHierarchy_Columns" ParentName = "Parent.Name">
    <ChildQuerier NodeType="Column" />
  </Folder>

  <!-- Table Columns Query -->
  <Querier NodeType="Column" Query="
    SELECT
        c.TABLE_SCHEMA AS schema_name,
        c.COLUMN_NAME AS object_name,
        c.TABLE_NAME AS parent_name,
        c.COLUMN_NAME + 
        ' (' +
        CASE 
            WHEN kcu.CONSTRAINT_NAME LIKE 'PK%' THEN 'PK, '
            ELSE ''
        END +
        CASE
            WHEN kcu2.CONSTRAINT_NAME LIKE 'FK%' THEN 'FK, '
            ELSE ''
        END + 
        c.DATA_TYPE +
        CASE  
            WHEN c.DATA_TYPE IN ('char', 'nchar', 'binary', 'varchar', 'nvarchar', 'varbinary') THEN
            CASE 
                WHEN c.CHARACTER_MAXIMUM_LENGTH = -1 THEN '(max)'
                ELSE '(' +  CAST(c.CHARACTER_MAXIMUM_LENGTH AS NVARCHAR) + ')'
            END 
            WHEN c.DATA_TYPE IN ('datetime2', 'time', 'datetimeoffset') THEN '(' +  CAST(c.NUMERIC_SCALE AS NVARCHAR) + ')'
            ELSE  ''
        END +
        -- logic for null/notnull
        CASE
            WHEN c.is_nullable = 'NO' THEN ', null'
            ELSE ', not null'
        END +
        ')' 
        AS display_name,
        'Column' AS object_type,
        CASE
            WHEN kcu.CONSTRAINT_NAME LIKE 'PK%' THEN 'PrimaryKey'
            WHEN kcu2.CONSTRAINT_NAME LIKE 'FK%' THEN 'ForeignKey'  
            ELSE NULL
        END
        AS object_sub_type
    FROM INFORMATION_SCHEMA.COLUMNS AS c
        LEFT JOIN
        information_schema.KEY_COLUMN_USAGE AS kcu ON c.TABLE_SCHEMA = kcu.TABLE_SCHEMA AND c.TABLE_NAME = kcu.TABLE_NAME AND c.COLUMN_NAME = kcu.COLUMN_NAME AND kcu.CONSTRAINT_NAME LIKE 'PK%'
        LEFT JOIN
        information_schema.KEY_COLUMN_USAGE AS kcu2 ON c.TABLE_SCHEMA = kcu2.TABLE_SCHEMA AND c.TABLE_NAME = kcu2.TABLE_NAME AND c.COLUMN_NAME = kcu2.COLUMN_NAME AND kcu2.CONSTRAINT_NAME LIKE 'FK%'
    "
  />

  <!-- Column Node -->
  <Node Name="Column" Type="Column" IsLeaf="true" />

  <!-- Indexes folder definition-->
  <Folder Name="Indexes" Label="SR.SchemaHierarchy_Indexes" ParentName = "Parent.Name">
    <ChildQuerier NodeType="Index" />
  </Folder>

  <!-- Index Query -->
  <Querier NodeType="Index" Query="
  SELECT
    S.name AS schema_name,
    I.name AS object_name,
    O.name AS parent_name,
    I.name + ' (' +
      CASE WHEN I.is_unique = 1 THEN 'Unique' ELSE 'Non-Unique' END + 
      ', ' +
      CASE WHEN I.index_id = 1 THEN 'Clustered' ELSE 'Non-Clustered' END +
      ')'
      AS display_name,
      'Index' AS object_type,
    CASE WHEN I.is_primary_key = 1 THEN 'PKINDEX' ELSE 'INDEX' END object_sub_type
  FROM
    sys.schemas AS S
    JOIN (        
            select object_id, name, schema_id
            FROM sys.tables
            UNION ALL
            select object_id, name, schema_id
            from sys.views
        ) AS O ON O.schema_id = S.schema_id
    JOIN sys.indexes AS I ON I.object_id = O.object_id
  Where I.name IS NOT NULL
  " />

  <!-- Index Node -->
  <Node Name="Index" Type="Index" IsLeaf="true" AddParentInfoToScriptingObject="true" />

  <!-- Views folder definition-->
  <Folder Name="Views" Label="SR.SchemaHierarchy_Views" ParentName = "Parent.Name">
    <ChildQuerier NodeType="View" />
  </Folder>

  <!-- View Query -->
  <Querier NodeType="View" Query="
  SELECT
    TABLE_SCHEMA AS schema_name,
    TABLE_NAME AS object_name,
    TABLE_SCHEMA AS parent_name,
    CONCAT(TABLE_SCHEMA, '.', TABLE_NAME) AS display_name,
    'View' AS object_type,
    NULL AS object_sub_type
  FROM
    INFORMATION_SCHEMA.TABLES
  WHERE
    TABLE_TYPE = 'VIEW'
  " />

  <!-- View Node -->
  <Node Name="View" Type="View" IsLeaf="false">
    <ChildFolder Name="Columns" />
    <ChildFolder Name="Indexes" />
  </Node>

  <!-- Stored Procedures folder definition-->
  <Folder Name="StoredProcedures" Label="SR.SchemaHierarchy_StoredProcedures" ParentName = "Parent.Name">
    <ChildQuerier NodeType="StoredProcedure" />
  </Folder>

  <!-- Stored Procedure Query -->
  <Querier NodeType="StoredProcedure" Query="
  SELECT
    SPECIFIC_SCHEMA AS schema_name,
    SPECIFIC_NAME AS object_name,
    SPECIFIC_SCHEMA AS parent_name,
    CONCAT(SPECIFIC_SCHEMA, '.', SPECIFIC_NAME) AS display_name,
    'StoredProcedure' AS object_type,
    NULL AS object_sub_type
  FROM
    INFORMATION_SCHEMA.ROUTINES
  WHERE
    ROUTINE_TYPE = 'PROCEDURE'
  " />

  <!-- Stored Procedure Node -->
  <Node Name="StoredProcedure" Type="StoredProcedure" IsLeaf="false" >
    <ChildFolder Name="Parameters" />
  </Node>

  <!-- Parameters folder definition-->
  <Folder Name="Parameters" Label="SR.SchemaHierarchy_Parameters" ParentName = "Parent.Name">
    <ChildQuerier NodeType="Param" />
  </Folder>

  <!-- Parameter Query -->
  <Querier NodeType="Param" Query="
    SELECT
        S.name AS schema_name,
        P.name AS object_name,
        O.name AS parent_name,
        P.name +  ' (' +  TP.name + ', ' +
        CASE WHEN P.is_output = 1 THEN 'Output' ELSE 'Input' END + ', ' +
        CASE WHEN P.has_default_value = 1 THEN 'Default' ELSE 'No default' END + ')'
        AS display_name,
        'Param' AS object_type,
        CASE WHEN P.is_output = 1 THEN 'OutputParameter' ELSE 'InputParameter' END AS object_sub_type
    FROM
        sys.parameters AS P
        JOIN sys.types AS TP ON P.user_type_id = TP.user_type_id
        JOIN sys.objects AS O ON O.object_id = P.object_id
        JOIN sys.schemas AS S ON O.schema_id = S.schema_id
    WHERE P.name != NULL OR P.name != ''
"  />
  
    <!-- Parameter Node -->
    <Node Name="Param" Type="Param" IsLeaf="true" />

  <!-- Functions folder definition-->
  <Folder Name="Functions" Label="SR.SchemaHierarchy_Functions" ParentName = "Parent.Name">
    <ChildFolder Name="ScalarFunctions" />
    <ChildFolder Name="TableValuedFunctions" />
  </Folder>

  <!-- Scalar Functions folder definition-->
  <Folder Name="ScalarFunctions" Label="SR.SchemaHierarchy_ScalarValuedFunctions" ParentName = "Parent.Parent.Name">
    <ChildQuerier NodeType="ScalarFunction" />
  </Folder>

  <!-- Scalar Function Query -->
  <Querier NodeType="ScalarFunction" Query="
  SELECT
      S.name AS schema_name,
      P.name AS object_name,
      S.name AS parent_name,
      CONCAT (S.name, '.', P.name) AS display_name,
      'ScalarFunction' AS object_type,
      NULL AS object_sub_type
  FROM
      sys.schemas AS S
      JOIN sys.objects AS P ON S.schema_id = P.schema_id
  WHERE
      P.type = 'FN'
  " />

  <!-- Scalar Function Node -->
  <Node Name="ScalarFunction" Type="ScalarFunction" IsLeaf="false" ScriptingObjectType="UserDefinedFunction">
    <ChildFolder Name="Parameters" />
  </Node>



  <!-- Table Valued Functions folder definition-->
  <Folder Name="TableValuedFunctions" Label="SR.SchemaHierarchy_TableValuedFunctions" ParentName = "Parent.Parent.Name">
    <ChildQuerier NodeType="TableValuedFunction" />
  </Folder>

  <!-- Table Valued Function Query -->
  <Querier NodeType="TableValuedFunction" Query="
  SELECT
      S.name AS schema_name,
      P.name AS object_name,
      S.name AS parent_name,
      CONCAT (S.name, '.', P.name) AS display_name,
      'TableValuedFunction' AS object_type,
      NULL AS object_sub_type
  FROM
      sys.schemas AS S
      JOIN sys.objects AS P ON S.schema_id = P.schema_id
  WHERE
      P.type = 'IF' OR P.type = 'TF'
  " />

  <!-- Table Valued Function Node -->
  <Node Name="TableValuedFunction" Type="TableValuedFunction" IsLeaf="false" ScriptingObjectType="UserDefinedFunction">
    <ChildFolder Name="Parameters" />
  </Node>
</ObjectExplorerModel>