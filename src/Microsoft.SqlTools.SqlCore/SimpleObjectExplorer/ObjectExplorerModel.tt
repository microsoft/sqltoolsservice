<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Xml.dll" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq"#>
//
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
//

// This file was generated by a T4 Template. Do not modify directly, instead update the ObjectExplorerModel.xml
// and re-run the T4 template (ObjectExplorerModel.tt). This can be done in Visual Studio by right-click in and choosing "Run Custom Tool",
// or from the command-line on any platform by running "build.cmd -Target=CodeGen" or "build.sh -Target=CodeGen".

using System.Collections.Generic;

namespace Microsoft.SqlTools.SqlCore.SimpleObjectExplorer
{
<#
	var directory = Path.GetDirectoryName(Host.TemplateFile);
	string xmlFile = Path.Combine(directory, "ObjectExplorerModel.xml");
	XmlDocument doc = new XmlDocument();
	doc.Load(xmlFile);

	XmlNodeList nodes = doc.SelectNodes("//Node");
	foreach (XmlNode node in nodes)
	{
		var nodeName = node.Attributes["Name"].Value;
		var nodeType = node.Attributes["Type"].Value;
		var isLeaf = node.Attributes["IsLeaf"].Value;
		string scriptingObjectType;
		if(node.Attributes["ScriptingObjectType"] != null)
		{
			scriptingObjectType = node.Attributes["ScriptingObjectType"].Value;
		}
		else
		{
			scriptingObjectType = nodeType;
		}
		var addParentInfoToScriptingObject = "false";
		if (node.Attributes["AddParentInfoToScriptingObject"] != null)
  		{
			addParentInfoToScriptingObject = node.Attributes["AddParentInfoToScriptingObject"].Value;
		}
#>
	/// <summary>
	/// <#= nodeName #> Node
	/// </summary>
	public class <#= nodeName #>Node : TreeNode
	{
		public <#= nodeName #>Node(TreeNode parent, ObjectMetadata metadata) : base(parent, metadata, <#= addParentInfoToScriptingObject #>)
		{
			Type = NodeTypes.<#= nodeType #>;
			IsLeaf = <#= isLeaf #>;
			ScriptingObject.Type = "<#= scriptingObjectType #>";
		}

		public override void  LoadChildren(ObjectMetadata[] metadata)
		{
			this.Children = new List<TreeNode>();
<#
		LoadChildren(doc, node);
#>
		}
	}
<#
	}

	XmlNodeList folders = doc.SelectNodes("//Folder");
	foreach (XmlNode folder in folders)
	{
		var folderName = folder.Attributes["Name"].Value;
		var folderLabel = folder.Attributes["Label"].Value;
		
#>
	public class <#= folderName #>Folder : FolderNode
	{
		public <#= folderName #>Folder(TreeNode parent) : base(parent)
		{
			Name = "<#= folderName #>";
			Type = NodeTypes.<#= folderName #>;
			IsLeaf = false;
			Label = <#= folderLabel #>;
		}

		public override void  LoadChildren(ObjectMetadata[] metadata)
		{
			this.Children = new List<TreeNode>();
<#	
		LoadFolderChildren(doc, folder);
#>
		}
	}
<#
	}
#>

	public static class ObjectExplorerModelQueries
	{
		public static Dictionary<string, string> Queries = new Dictionary<string, string>()
		{
<#

    XmlNodeList queriers = doc.SelectNodes("//Querier");
	foreach (var querier in queriers)
	{
		var querierNode = querier as XmlNode;
        var querierQuery = querierNode.Attributes["Query"].Value;
#>
			{ 
				"<#= querierNode.Attributes["NodeType"].Value #>", 
				@"<#= querierQuery #>" 
			},
<#  
    }
#>
		};
	}

	public enum NodeTypes
	{
<#
	foreach (XmlNode node in nodes)
	{
		var nodeName = node.Attributes["Name"].Value;
#>
		<#= nodeName #>,
<#
	}

	foreach (XmlNode folder in folders)
	{
		var folderName = folder.Attributes["Name"].Value;
#>
		<#= folderName #>,
<#
	}
#>
		Folder,
	}
}
<#+

	public void LoadChildren(XmlDocument doc, XmlNode node)
	{
		var childQueriers = node.SelectNodes("ChildQuerier");
		foreach (XmlNode querier in childQueriers)
		{
			var nodeType = querier.Attributes["NodeType"].Value;
			var schemaMatching = querier.Attributes["SchemaMatching"] == null ? "true" : querier.Attributes["SchemaMatching"].Value;
			verifyQuerier(doc, nodeType);
			WriteLine("			foreach(ObjectMetadata child in metadata)");
			WriteLine("			{");
			if(schemaMatching == "true")
			{
				WriteLine("				if (child.Type == \"{0}\" && child.Parent == this.Name && child.Schema == this.SchemaName)", nodeType);
			}
			else
			{
				WriteLine("				if (child.Type == \"{0}\" && child.Parent == this.Name)", nodeType);
			}
			WriteLine("				{");
			WriteLine("					Children.Add(new {0}Node(this, child));", nodeType);
			WriteLine("				}");
			WriteLine("			}");
		}

		var childFolder = node.SelectNodes("ChildFolder");
		foreach (XmlNode folder in childFolder)
		{
			var name = folder.Attributes["Name"].Value;
			verifyFolder(doc, name);
			WriteLine("			Children.Add(new {0}Folder(this));", name);
		}
	}

	public void LoadFolderChildren( XmlDocument doc, XmlNode node)
	{
		var parentName = node.Attributes["ParentName"].Value;
		var childQueriers = node.SelectNodes("ChildQuerier");
		foreach (XmlNode querier in childQueriers)
		{
			var nodeType = querier.Attributes["NodeType"].Value;
			var schemaMatching = querier.Attributes["SchemaMatching"] == null ? "true" : querier.Attributes["SchemaMatching"].Value;
			verifyQuerier(doc, nodeType);
			WriteLine("			foreach(ObjectMetadata child in metadata)");
			WriteLine("			{");
			if(schemaMatching == "true")
			{
				WriteLine("				if (child.Type == \"{0}\" && child.Parent == this.{1} && child.Schema == this.SchemaName)", nodeType, parentName);
			}
			else
			{
				WriteLine("				if (child.Type == \"{0}\" && child.Parent == this.{1})", nodeType, parentName);
			}
			WriteLine("				{");
			WriteLine("					Children.Add(new {0}Node(this, child));", nodeType);
			WriteLine("				}");
			WriteLine("			}");
		}

		var childFolder = node.SelectNodes("ChildFolder");
		foreach (XmlNode folder in childFolder)
		{
			var name = folder.Attributes["Name"].Value;
			verifyFolder(doc, name);
			WriteLine("			Children.Add(new {0}Folder(this));", name);
		}
	}

	public void verifyQuerier(XmlDocument doc, string nodeType)
	{
		var querier = doc.SelectSingleNode("//Querier[@NodeType='" + nodeType + "']");
		if (querier == null)
		{
			throw new Exception("Querier for node type `" + nodeType + "` not found");
		}
	}

	public void verifyFolder(XmlDocument doc, string folderName)
	{
		var folder = doc.SelectSingleNode("//Folder[@Name='" + folderName + "']");
		if (folder == null)
		{
			throw new Exception("Folder for node type `" + folderName  + "` not found");
		}
	}
#>